
TERRENA_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d58  08007d58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d60  08007d60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000006f0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000760  20000760  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe5e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046a2  00000000  00000000  0003fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a88  00000000  00000000  000445a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001898  00000000  00000000  00046028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ec4  00000000  00000000  000478c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023462  00000000  00000000  0006f784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7065  00000000  00000000  00092be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00179c4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000736c  00000000  00000000  00179c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ccc 	.word	0x08007ccc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007ccc 	.word	0x08007ccc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_CRC_Init+0x20>)
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <MX_CRC_Init+0x24>)
 80005ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_CRC_Init+0x20>)
 80005b0:	f001 fb82 	bl	8001cb8 <HAL_CRC_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005ba:	f000 fe33 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000008c 	.word	0x2000008c
 80005c8:	40023000 	.word	0x40023000

080005cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <HAL_CRC_MspInit+0x3c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d10d      	bne.n	80005fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_CRC_MspInit+0x40>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <HAL_CRC_MspInit+0x40>)
 80005e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_CRC_MspInit+0x40>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023000 	.word	0x40023000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_DMA2D_Init+0x60>)
 8000618:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_DMA2D_Init+0x5c>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_DMA2D_Init+0x5c>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_DMA2D_Init+0x5c>)
 800063a:	2200      	movs	r2, #0
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000646:	f001 fbe5 	bl	8001e14 <HAL_DMA2D_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000650:	f000 fde8 	bl	8001224 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000654:	2101      	movs	r1, #1
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_DMA2D_Init+0x5c>)
 8000658:	f001 fd36 	bl	80020c8 <HAL_DMA2D_ConfigLayer>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000662:	f000 fddf 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000094 	.word	0x20000094
 8000670:	4002b000 	.word	0x4002b000

08000674 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_DMA2D_MspInit+0x48>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d115      	bne.n	80006b2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_DMA2D_MspInit+0x4c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <HAL_DMA2D_MspInit+0x4c>)
 8000690:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_DMA2D_MspInit+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	205a      	movs	r0, #90	; 0x5a
 80006a8:	f001 fadc 	bl	8001c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80006ac:	205a      	movs	r0, #90	; 0x5a
 80006ae:	f001 faf5 	bl	8001c9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	4002b000 	.word	0x4002b000
 80006c0:	40023800 	.word	0x40023800

080006c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_FMC_Init+0x98>)
 80006de:	4a20      	ldr	r2, [pc, #128]	; (8000760 <MX_FMC_Init+0x9c>)
 80006e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_FMC_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_FMC_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_FMC_Init+0x98>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_FMC_Init+0x98>)
 80006f6:	2210      	movs	r2, #16
 80006f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_FMC_Init+0x98>)
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_FMC_Init+0x98>)
 8000702:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000706:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_FMC_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_FMC_Init+0x98>)
 8000710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000714:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_FMC_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_FMC_Init+0x98>)
 800071e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000728:	2307      	movs	r3, #7
 800072a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000734:	2303      	movs	r3, #3
 8000736:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_FMC_Init+0x98>)
 8000746:	f004 fc93 	bl	8005070 <HAL_SDRAM_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000750:	f000 fd68 	bl	8001224 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000d4 	.word	0x200000d4
 8000760:	a0000140 	.word	0xa0000140

08000764 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <HAL_FMC_MspInit+0x104>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d16f      	bne.n	8000860 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000780:	4b39      	ldr	r3, [pc, #228]	; (8000868 <HAL_FMC_MspInit+0x104>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <HAL_FMC_MspInit+0x108>)
 800078c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <HAL_FMC_MspInit+0x108>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6393      	str	r3, [r2, #56]	; 0x38
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <HAL_FMC_MspInit+0x108>)
 8000798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80007a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007a6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b4:	230c      	movs	r3, #12
 80007b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	482c      	ldr	r0, [pc, #176]	; (8000870 <HAL_FMC_MspInit+0x10c>)
 80007be:	f001 fd15 	bl	80021ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d2:	230c      	movs	r3, #12
 80007d4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_FMC_MspInit+0x110>)
 80007dc:	f001 fd06 	bl	80021ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80007e0:	f248 1333 	movw	r3, #33075	; 0x8133
 80007e4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f2:	230c      	movs	r3, #12
 80007f4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	481f      	ldr	r0, [pc, #124]	; (8000878 <HAL_FMC_MspInit+0x114>)
 80007fc:	f001 fcf6 	bl	80021ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000800:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000804:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000812:	230c      	movs	r3, #12
 8000814:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4818      	ldr	r0, [pc, #96]	; (800087c <HAL_FMC_MspInit+0x118>)
 800081c:	f001 fce6 	bl	80021ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000820:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000824:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <HAL_FMC_MspInit+0x11c>)
 800083c:	f001 fcd6 	bl	80021ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000850:	230c      	movs	r3, #12
 8000852:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	480a      	ldr	r0, [pc, #40]	; (8000884 <HAL_FMC_MspInit+0x120>)
 800085a:	f001 fcc7 	bl	80021ec <HAL_GPIO_Init>
 800085e:	e000      	b.n	8000862 <HAL_FMC_MspInit+0xfe>
    return;
 8000860:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000108 	.word	0x20000108
 800086c:	40023800 	.word	0x40023800
 8000870:	40021400 	.word	0x40021400
 8000874:	40020800 	.word	0x40020800
 8000878:	40021800 	.word	0x40021800
 800087c:	40021000 	.word	0x40021000
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40020400 	.word	0x40020400

08000888 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000890:	f7ff ff68 	bl	8000764 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	4b81      	ldr	r3, [pc, #516]	; (8000abc <MX_GPIO_Init+0x220>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a80      	ldr	r2, [pc, #512]	; (8000abc <MX_GPIO_Init+0x220>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b7e      	ldr	r3, [pc, #504]	; (8000abc <MX_GPIO_Init+0x220>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	4b7a      	ldr	r3, [pc, #488]	; (8000abc <MX_GPIO_Init+0x220>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a79      	ldr	r2, [pc, #484]	; (8000abc <MX_GPIO_Init+0x220>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b77      	ldr	r3, [pc, #476]	; (8000abc <MX_GPIO_Init+0x220>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	4b73      	ldr	r3, [pc, #460]	; (8000abc <MX_GPIO_Init+0x220>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a72      	ldr	r2, [pc, #456]	; (8000abc <MX_GPIO_Init+0x220>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b70      	ldr	r3, [pc, #448]	; (8000abc <MX_GPIO_Init+0x220>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0320 	and.w	r3, r3, #32
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	4b6c      	ldr	r3, [pc, #432]	; (8000abc <MX_GPIO_Init+0x220>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a6b      	ldr	r2, [pc, #428]	; (8000abc <MX_GPIO_Init+0x220>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b69      	ldr	r3, [pc, #420]	; (8000abc <MX_GPIO_Init+0x220>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b65      	ldr	r3, [pc, #404]	; (8000abc <MX_GPIO_Init+0x220>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a64      	ldr	r2, [pc, #400]	; (8000abc <MX_GPIO_Init+0x220>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b62      	ldr	r3, [pc, #392]	; (8000abc <MX_GPIO_Init+0x220>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <MX_GPIO_Init+0x220>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5d      	ldr	r2, [pc, #372]	; (8000abc <MX_GPIO_Init+0x220>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b5b      	ldr	r3, [pc, #364]	; (8000abc <MX_GPIO_Init+0x220>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b57      	ldr	r3, [pc, #348]	; (8000abc <MX_GPIO_Init+0x220>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a56      	ldr	r2, [pc, #344]	; (8000abc <MX_GPIO_Init+0x220>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b54      	ldr	r3, [pc, #336]	; (8000abc <MX_GPIO_Init+0x220>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b50      	ldr	r3, [pc, #320]	; (8000abc <MX_GPIO_Init+0x220>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <MX_GPIO_Init+0x220>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <MX_GPIO_Init+0x220>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2116      	movs	r1, #22
 8000996:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <MX_GPIO_Init+0x224>)
 8000998:	f001 fdd4 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	4848      	ldr	r0, [pc, #288]	; (8000ac4 <MX_GPIO_Init+0x228>)
 80009a2:	f001 fdcf 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009ac:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <MX_GPIO_Init+0x22c>)
 80009ae:	f001 fdc9 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009b8:	4844      	ldr	r0, [pc, #272]	; (8000acc <MX_GPIO_Init+0x230>)
 80009ba:	f001 fdc3 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin;
 80009be:	233c      	movs	r3, #60	; 0x3c
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	483f      	ldr	r0, [pc, #252]	; (8000ad0 <MX_GPIO_Init+0x234>)
 80009d2:	f001 fc0b 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009d6:	2316      	movs	r3, #22
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4834      	ldr	r0, [pc, #208]	; (8000ac0 <MX_GPIO_Init+0x224>)
 80009ee:	f001 fbfd 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009f2:	f248 0307 	movw	r3, #32775	; 0x8007
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	482e      	ldr	r0, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0x228>)
 8000a0a:	f001 fbef 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0x228>)
 8000a26:	f001 fbe1 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0x224>)
 8000a40:	f001 fbd4 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a44:	2304      	movs	r3, #4
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	481f      	ldr	r0, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0x238>)
 8000a58:	f001 fbc8 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <MX_GPIO_Init+0x22c>)
 8000a72:	f001 fbbb 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_GPIO_Init+0x22c>)
 8000a90:	f001 fbac 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a94:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_GPIO_Init+0x230>)
 8000aae:	f001 fb9d 	bl	80021ec <HAL_GPIO_Init>

}
 8000ab2:	bf00      	nop
 8000ab4:	3738      	adds	r7, #56	; 0x38
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020c00 	.word	0x40020c00
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <MX_I2C3_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <MX_I2C3_Init+0x7c>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000b16:	f002 fef9 	bl	800390c <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 fb80 	bl	8001224 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000b28:	f003 f834 	bl	8003b94 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b32:	f000 fb77 	bl	8001224 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_I2C3_Init+0x74>)
 8000b3a:	f003 f867 	bl	8003c0c <HAL_I2CEx_ConfigDigitalFilter>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b44:	f000 fb6e 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000010c 	.word	0x2000010c
 8000b50:	40005c00 	.word	0x40005c00
 8000b54:	000186a0 	.word	0x000186a0

08000b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <HAL_I2C_MspInit+0xc4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d14b      	bne.n	8000c12 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb8:	2312      	movs	r3, #18
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4815      	ldr	r0, [pc, #84]	; (8000c24 <HAL_I2C_MspInit+0xcc>)
 8000bd0:	f001 fb0c 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000be6:	2304      	movs	r3, #4
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <HAL_I2C_MspInit+0xd0>)
 8000bf2:	f001 fafb 	bl	80021ec <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000c00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_I2C_MspInit+0xc8>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40005c00 	.word	0x40005c00
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020000 	.word	0x40020000

08000c2c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2234      	movs	r2, #52	; 0x34
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f006 fbd1 	bl	80073e0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c40:	4a39      	ldr	r2, [pc, #228]	; (8000d28 <MX_LTDC_Init+0xfc>)
 8000c42:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c44:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c4a:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c50:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c56:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c5c:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c5e:	2209      	movs	r2, #9
 8000c60:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c6a:	221d      	movs	r2, #29
 8000c6c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c70:	2203      	movs	r2, #3
 8000c72:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c76:	f240 120d 	movw	r2, #269	; 0x10d
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c7e:	f240 1243 	movw	r2, #323	; 0x143
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c86:	f240 1217 	movw	r2, #279	; 0x117
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c8e:	f240 1247 	movw	r2, #327	; 0x147
 8000c92:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cac:	481d      	ldr	r0, [pc, #116]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000cae:	f002 ffed 	bl	8003c8c <HAL_LTDC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f000 fab4 	bl	8001224 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000cc0:	23f0      	movs	r3, #240	; 0xf0
 8000cc2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000cc8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ccc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cd2:	23ff      	movs	r3, #255	; 0xff
 8000cd4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cde:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000ce4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000cea:	23f0      	movs	r3, #240	; 0xf0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000cee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_LTDC_Init+0xf8>)
 8000d0e:	f003 f94f 	bl	8003fb0 <HAL_LTDC_ConfigLayer>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000d18:	f000 fa84 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3738      	adds	r7, #56	; 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000160 	.word	0x20000160
 8000d28:	40016800 	.word	0x40016800

08000d2c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09a      	sub	sp, #104	; 0x68
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	2230      	movs	r2, #48	; 0x30
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f006 fb47 	bl	80073e0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a85      	ldr	r2, [pc, #532]	; (8000f6c <HAL_LTDC_MspInit+0x240>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	f040 8102 	bne.w	8000f62 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000d62:	2332      	movs	r3, #50	; 0x32
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 ffbc 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000d7e:	f000 fa51 	bl	8001224 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	4b7a      	ldr	r3, [pc, #488]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a79      	ldr	r2, [pc, #484]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b77      	ldr	r3, [pc, #476]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	4b73      	ldr	r3, [pc, #460]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a72      	ldr	r2, [pc, #456]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b70      	ldr	r3, [pc, #448]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0320 	and.w	r3, r3, #32
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	4b6c      	ldr	r3, [pc, #432]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a6b      	ldr	r2, [pc, #428]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b69      	ldr	r3, [pc, #420]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a64      	ldr	r2, [pc, #400]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a5d      	ldr	r2, [pc, #372]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b57      	ldr	r3, [pc, #348]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a56      	ldr	r2, [pc, #344]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a4f      	ldr	r2, [pc, #316]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <HAL_LTDC_MspInit+0x244>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e60:	4619      	mov	r1, r3
 8000e62:	4844      	ldr	r0, [pc, #272]	; (8000f74 <HAL_LTDC_MspInit+0x248>)
 8000e64:	f001 f9c2 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e68:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e6c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e7a:	230e      	movs	r3, #14
 8000e7c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e82:	4619      	mov	r1, r3
 8000e84:	483c      	ldr	r0, [pc, #240]	; (8000f78 <HAL_LTDC_MspInit+0x24c>)
 8000e86:	f001 f9b1 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e9a:	2309      	movs	r3, #9
 8000e9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4835      	ldr	r0, [pc, #212]	; (8000f7c <HAL_LTDC_MspInit+0x250>)
 8000ea6:	f001 f9a1 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000eaa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000eae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ebc:	230e      	movs	r3, #14
 8000ebe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	482d      	ldr	r0, [pc, #180]	; (8000f7c <HAL_LTDC_MspInit+0x250>)
 8000ec8:	f001 f990 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ecc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ed0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ede:	230e      	movs	r3, #14
 8000ee0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4825      	ldr	r0, [pc, #148]	; (8000f80 <HAL_LTDC_MspInit+0x254>)
 8000eea:	f001 f97f 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000eee:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ef2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f00:	230e      	movs	r3, #14
 8000f02:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481e      	ldr	r0, [pc, #120]	; (8000f84 <HAL_LTDC_MspInit+0x258>)
 8000f0c:	f001 f96e 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f10:	2348      	movs	r3, #72	; 0x48
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f20:	230e      	movs	r3, #14
 8000f22:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4817      	ldr	r0, [pc, #92]	; (8000f88 <HAL_LTDC_MspInit+0x25c>)
 8000f2c:	f001 f95e 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f34:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f42:	2309      	movs	r3, #9
 8000f44:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <HAL_LTDC_MspInit+0x254>)
 8000f4e:	f001 f94d 	bl	80021ec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	2058      	movs	r0, #88	; 0x58
 8000f58:	f000 fe84 	bl	8001c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f5c:	2058      	movs	r0, #88	; 0x58
 8000f5e:	f000 fe9d 	bl	8001c9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3768      	adds	r7, #104	; 0x68
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40016800 	.word	0x40016800
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40021800 	.word	0x40021800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fd4a 	bl	8001a28 <HAL_Init>

  /* USER CODE BEGIN Init */
  TARVOS3_Init();
 8000f94:	f000 f8b2 	bl	80010fc <TARVOS3_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f846 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f7ff fc7e 	bl	800089c <MX_GPIO_Init>
  MX_CRC_Init();
 8000fa0:	f7ff fb00 	bl	80005a4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000fa4:	f7ff fb34 	bl	8000610 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fa8:	f7ff fb8c 	bl	80006c4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000fac:	f7ff fd94 	bl	8000ad8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fb0:	f7ff fe3c 	bl	8000c2c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fb4:	f000 f93c 	bl	8001230 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000fb8:	f000 fb0c 	bl	80015d4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000fbc:	f000 fba6 	bl	800170c <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000fc0:	f000 fb7a 	bl	80016b8 <MX_UART5_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000fc4:	f000 fc7c 	bl	80018c0 <MX_USB_OTG_HS_HCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)tx_data, sizeof(tx_data));
 8000fc8:	2264      	movs	r2, #100	; 0x64
 8000fca:	4911      	ldr	r1, [pc, #68]	; (8001010 <main+0x84>)
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <main+0x88>)
 8000fce:	f004 fdda 	bl	8005b86 <HAL_UART_Transmit_IT>
  HAL_UART_Transmit_IT(&huart5, (uint8_t*)tx_data, sizeof(tx_data));
 8000fd2:	2264      	movs	r2, #100	; 0x64
 8000fd4:	490e      	ldr	r1, [pc, #56]	; (8001010 <main+0x84>)
 8000fd6:	4810      	ldr	r0, [pc, #64]	; (8001018 <main+0x8c>)
 8000fd8:	f004 fdd5 	bl	8005b86 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)tx_data, sizeof(tx_data));
 8000fdc:	2264      	movs	r2, #100	; 0x64
 8000fde:	490c      	ldr	r1, [pc, #48]	; (8001010 <main+0x84>)
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <main+0x88>)
 8000fe2:	f004 fe15 	bl	8005c10 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, (uint8_t*)rx_data, sizeof(rx_data));
 8000fe6:	2264      	movs	r2, #100	; 0x64
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <main+0x90>)
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <main+0x8c>)
 8000fec:	f004 fe10 	bl	8005c10 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <main+0x94>)
 8000ff6:	f001 fabe 	bl	8002576 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffe:	f000 fd55 	bl	8001aac <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart1, "HOLA MUNDO",13);
 8001002:	220d      	movs	r2, #13
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <main+0x98>)
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <main+0x88>)
 8001008:	f004 fdbd 	bl	8005b86 <HAL_UART_Transmit_IT>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800100c:	e7f0      	b.n	8000ff0 <main+0x64>
 800100e:	bf00      	nop
 8001010:	20000208 	.word	0x20000208
 8001014:	20000404 	.word	0x20000404
 8001018:	200003c0 	.word	0x200003c0
 800101c:	2000026c 	.word	0x2000026c
 8001020:	40021800 	.word	0x40021800
 8001024:	08007ce4 	.word	0x08007ce4

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 f9d2 	bl	80073e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <SystemClock_Config+0xcc>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <SystemClock_Config+0xd0>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <SystemClock_Config+0xd0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010a0:	2348      	movs	r3, #72	; 0x48
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010a8:	2303      	movs	r3, #3
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f953 	bl	800435c <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010bc:	f000 f8b2 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2102      	movs	r1, #2
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fbb5 	bl	800484c <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010e8:	f000 f89c 	bl	8001224 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	; 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <TARVOS3_Init>:
  	TARVOS3_Transmit();
}


void TARVOS3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af04      	add	r7, sp, #16
  checksum = START_SIGNAL ^ sizeof(CHANNEL_SELECTED) ^ CHANNEL_SELECTED;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <TARVOS3_Init+0x30>)
 8001104:	226a      	movs	r2, #106	; 0x6a
 8001106:	701a      	strb	r2, [r3, #0]
  sprintf(tx_data, "%02X %02X %02X %02X %02X", START_SIGNAL, CMD_SET_CHANNEL_REQ, sizeof(CHANNEL_SELECTED), CHANNEL_SELECTED, checksum);
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <TARVOS3_Init+0x30>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	236c      	movs	r3, #108	; 0x6c
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2304      	movs	r3, #4
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2306      	movs	r3, #6
 8001118:	2202      	movs	r2, #2
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <TARVOS3_Init+0x34>)
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <TARVOS3_Init+0x38>)
 800111e:	f006 f967 	bl	80073f0 <siprintf>
  TARVOS3_Transmit();
 8001122:	f000 f809 	bl	8001138 <TARVOS3_Transmit>
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200002d0 	.word	0x200002d0
 8001130:	08007cf0 	.word	0x08007cf0
 8001134:	20000208 	.word	0x20000208

08001138 <TARVOS3_Transmit>:

void TARVOS3_Transmit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  HAL_UART_Transmit_IT(&huart5, (uint8_t*)tx_data, sizeof(tx_data));
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	4903      	ldr	r1, [pc, #12]	; (800114c <TARVOS3_Transmit+0x14>)
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <TARVOS3_Transmit+0x18>)
 8001142:	f004 fd20 	bl	8005b86 <HAL_UART_Transmit_IT>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000208 	.word	0x20000208
 8001150:	200003c0 	.word	0x200003c0

08001154 <HAL_UART_RxCpltCallback>:

/*CALLBACK FUNCT*/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_UART_RxCpltCallback+0x74>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d10e      	bne.n	8001182 <HAL_UART_RxCpltCallback+0x2e>
  {
	  tx_data[0] = START_SIGNAL;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 8001166:	2202      	movs	r2, #2
 8001168:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = CMD_DATA_REQ;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 800116c:	2200      	movs	r2, #0
 800116e:	705a      	strb	r2, [r3, #1]
	  tx_data[2] = sizeof(CHANNEL_SELECTED);
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 8001172:	2204      	movs	r2, #4
 8001174:	709a      	strb	r2, [r3, #2]
	  tx_data[3] = rx_data[0];
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_UART_RxCpltCallback+0x7c>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 800117c:	70da      	strb	r2, [r3, #3]
	  TARVOS3_Transmit();
 800117e:	f7ff ffdb 	bl	8001138 <TARVOS3_Transmit>
  }

  if(huart == &huart5)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_UART_RxCpltCallback+0x80>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d114      	bne.n	80011b4 <HAL_UART_RxCpltCallback+0x60>
	{
	  tx_data[0] = rx_data[3];
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UART_RxCpltCallback+0x7c>)
 800118c:	78da      	ldrb	r2, [r3, #3]
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 8001190:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = rx_data[4];
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_UART_RxCpltCallback+0x7c>)
 8001194:	791a      	ldrb	r2, [r3, #4]
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 8001198:	705a      	strb	r2, [r3, #1]
	  tx_data[2] = rx_data[5];
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_UART_RxCpltCallback+0x7c>)
 800119c:	795a      	ldrb	r2, [r3, #5]
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 80011a0:	709a      	strb	r2, [r3, #2]
	  tx_data[3] = rx_data[6];
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_UART_RxCpltCallback+0x7c>)
 80011a4:	799a      	ldrb	r2, [r3, #6]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 80011a8:	70da      	strb	r2, [r3, #3]
	  HAL_UART_Transmit_IT(&huart1, (uint8_t*)tx_data,sizeof(tx_data));
 80011aa:	2264      	movs	r2, #100	; 0x64
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <HAL_UART_RxCpltCallback+0x78>)
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_UART_RxCpltCallback+0x74>)
 80011b0:	f004 fce9 	bl	8005b86 <HAL_UART_Transmit_IT>
	}


  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, sizeof(rx_data));
 80011b4:	2264      	movs	r2, #100	; 0x64
 80011b6:	4906      	ldr	r1, [pc, #24]	; (80011d0 <HAL_UART_RxCpltCallback+0x7c>)
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <HAL_UART_RxCpltCallback+0x74>)
 80011ba:	f004 fd29 	bl	8005c10 <HAL_UART_Receive_IT>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000404 	.word	0x20000404
 80011cc:	20000208 	.word	0x20000208
 80011d0:	2000026c 	.word	0x2000026c
 80011d4:	200003c0 	.word	0x200003c0

080011d8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	memset(tx_data, 0, strlen(tx_data));
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <HAL_UART_TxCpltCallback+0x24>)
 80011e2:	f7ff f805 	bl	80001f0 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <HAL_UART_TxCpltCallback+0x24>)
 80011ee:	f006 f8f7 	bl	80073e0 <memset>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000208 	.word	0x20000208

08001200 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001212:	f000 fc2b 	bl	8001a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40001000 	.word	0x40001000

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	e7fe      	b.n	800122c <Error_Handler+0x8>
	...

08001230 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_SPI5_Init+0x64>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <MX_SPI5_Init+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_SPI5_Init+0x64>)
 800123c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001240:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_SPI5_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_SPI5_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_SPI5_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_SPI5_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_SPI5_Init+0x64>)
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_SPI5_Init+0x64>)
 8001264:	2218      	movs	r2, #24
 8001266:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_SPI5_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_SPI5_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_SPI5_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_SPI5_Init+0x64>)
 800127c:	220a      	movs	r2, #10
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_SPI5_Init+0x64>)
 8001282:	f003 ff29 	bl	80050d8 <HAL_SPI_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800128c:	f7ff ffca 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200002d4 	.word	0x200002d4
 8001298:	40015000 	.word	0x40015000

0800129c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_SPI_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12c      	bne.n	8001318 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001308:	2305      	movs	r3, #5
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 8001314:	f000 ff6a 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40015000 	.word	0x40015000
 8001324:	40023800 	.word	0x40023800
 8001328:	40021400 	.word	0x40021400

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_InitTick+0xe4>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_InitTick+0xe4>)
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_InitTick+0xe4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fc6a 	bl	8004c8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013c2:	f003 fc3b 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80013c6:	6378      	str	r0, [r7, #52]	; 0x34
 80013c8:	e004      	b.n	80013d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ca:	f003 fc37 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80013ce:	4603      	mov	r3, r0
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_InitTick+0xe8>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	3b01      	subs	r3, #1
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_InitTick+0xec>)
 80013e4:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_InitTick+0xf0>)
 80013e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_InitTick+0xec>)
 80013ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_InitTick+0xec>)
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_InitTick+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_InitTick+0xec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_InitTick+0xec>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <HAL_InitTick+0xec>)
 800140a:	f003 feee 	bl	80051ea <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <HAL_InitTick+0xec>)
 800141e:	f003 ff33 	bl	8005288 <HAL_TIM_Base_Start_IT>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001430:	2036      	movs	r0, #54	; 0x36
 8001432:	f000 fc33 	bl	8001c9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d808      	bhi.n	800144e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2036      	movs	r0, #54	; 0x36
 8001442:	f000 fc0f 	bl	8001c64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_InitTick+0xf4>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e002      	b.n	8001454 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001458:	4618      	mov	r0, r3
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	431bde83 	.word	0x431bde83
 8001468:	2000032c 	.word	0x2000032c
 800146c:	40001000 	.word	0x40001000
 8001470:	20000004 	.word	0x20000004

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <USART1_IRQHandler+0x10>)
 80014d2:	f004 fbcd 	bl	8005c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000404 	.word	0x20000404

080014e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <UART5_IRQHandler+0x10>)
 80014e6:	f004 fbc3 	bl	8005c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200003c0 	.word	0x200003c0

080014f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <TIM6_DAC_IRQHandler+0x10>)
 80014fa:	f003 ff35 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000032c 	.word	0x2000032c

08001508 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <OTG_HS_IRQHandler+0x10>)
 800150e:	f001 f8ae 	bl	800266e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000448 	.word	0x20000448

0800151c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <LTDC_IRQHandler+0x10>)
 8001522:	f002 fc83 	bl	8003e2c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000160 	.word	0x20000160

08001530 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA2D_IRQHandler+0x10>)
 8001536:	f000 fcb6 	bl	8001ea6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000094 	.word	0x20000094

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f005 ff0a 	bl	800738c <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20030000 	.word	0x20030000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	20000374 	.word	0x20000374
 80015ac:	20000760 	.word	0x20000760

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <SystemInit+0x20>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <SystemInit+0x20>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <MX_TIM1_Init+0x98>)
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <MX_TIM1_Init+0x9c>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_TIM1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_TIM1_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_TIM1_Init+0x98>)
 8001604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001608:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_TIM1_Init+0x98>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_TIM1_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_TIM1_Init+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <MX_TIM1_Init+0x98>)
 800161e:	f003 fde4 	bl	80051ea <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001628:	f7ff fdfc 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <MX_TIM1_Init+0x98>)
 800163a:	f003 ff9d 	bl	8005578 <HAL_TIM_ConfigClockSource>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001644:	f7ff fdee 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_TIM1_Init+0x98>)
 8001656:	f004 f9b9 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001660:	f7ff fde0 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000378 	.word	0x20000378
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10d      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40023800 	.word	0x40023800

080016b8 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_UART5_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_UART5_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_UART5_Init+0x4c>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_UART5_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_UART5_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_UART5_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_UART5_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_UART5_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_UART5_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_UART5_Init+0x4c>)
 80016f0:	f004 f9fc 	bl	8005aec <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80016fa:	f7ff fd93 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200003c0 	.word	0x200003c0
 8001708:	40005000 	.word	0x40005000

0800170c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f004 f9d2 	bl	8005aec <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f7ff fd69 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000404 	.word	0x20000404
 800175c:	40011000 	.word	0x40011000

08001760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_UART_MspInit+0x148>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d153      	bne.n	800182a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <HAL_UART_MspInit+0x14c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_UART_MspInit+0x14c>)
 800178c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b46      	ldr	r3, [pc, #280]	; (80018ac <HAL_UART_MspInit+0x14c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <HAL_UART_MspInit+0x14c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a41      	ldr	r2, [pc, #260]	; (80018ac <HAL_UART_MspInit+0x14c>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_UART_MspInit+0x14c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_UART_MspInit+0x14c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a3a      	ldr	r2, [pc, #232]	; (80018ac <HAL_UART_MspInit+0x14c>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_UART_MspInit+0x14c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017e8:	2308      	movs	r3, #8
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	482f      	ldr	r0, [pc, #188]	; (80018b0 <HAL_UART_MspInit+0x150>)
 80017f4:	f000 fcfa 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f8:	2304      	movs	r3, #4
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001808:	2308      	movs	r3, #8
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4828      	ldr	r0, [pc, #160]	; (80018b4 <HAL_UART_MspInit+0x154>)
 8001814:	f000 fcea 	bl	80021ec <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	2035      	movs	r0, #53	; 0x35
 800181e:	f000 fa21 	bl	8001c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001822:	2035      	movs	r0, #53	; 0x35
 8001824:	f000 fa3a 	bl	8001c9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001828:	e039      	b.n	800189e <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_UART_MspInit+0x158>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d134      	bne.n	800189e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_UART_MspInit+0x14c>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_UART_MspInit+0x14c>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6453      	str	r3, [r2, #68]	; 0x44
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_UART_MspInit+0x14c>)
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0x14c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_UART_MspInit+0x14c>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_UART_MspInit+0x14c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800186c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800187e:	2307      	movs	r3, #7
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <HAL_UART_MspInit+0x15c>)
 800188a:	f000 fcaf 	bl	80021ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2025      	movs	r0, #37	; 0x25
 8001894:	f000 f9e6 	bl	8001c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001898:	2025      	movs	r0, #37	; 0x25
 800189a:	f000 f9ff 	bl	8001c9c <HAL_NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3730      	adds	r7, #48	; 0x30
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40005000 	.word	0x40005000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40020000 	.word	0x40020000

080018c0 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <MX_USB_OTG_HS_HCD_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018cc:	220c      	movs	r2, #12
 80018ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018de:	2202      	movs	r2, #2
 80018e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018fc:	f000 fe55 	bl	80025aa <HAL_HCD_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001906:	f7ff fc8d 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000448 	.word	0x20000448
 8001914:	40040000 	.word	0x40040000

08001918 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_HCD_MspInit+0xb0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d141      	bne.n	80019be <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_HCD_MspInit+0xb4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_HCD_MspInit+0xb4>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_HCD_MspInit+0xb4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001956:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001968:	230c      	movs	r3, #12
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4817      	ldr	r0, [pc, #92]	; (80019d0 <HAL_HCD_MspInit+0xb8>)
 8001974:	f000 fc3a 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <HAL_HCD_MspInit+0xb8>)
 800198e:	f000 fc2d 	bl	80021ec <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_HCD_MspInit+0xb4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_HCD_MspInit+0xb4>)
 800199c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_HCD_MspInit+0xb4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	204d      	movs	r0, #77	; 0x4d
 80019b4:	f000 f956 	bl	8001c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80019b8:	204d      	movs	r0, #77	; 0x4d
 80019ba:	f000 f96f 	bl	8001c9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40040000 	.word	0x40040000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a0c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019da:	490e      	ldr	r1, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f0:	4c0b      	ldr	r4, [pc, #44]	; (8001a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019fe:	f7ff fdd7 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f005 fcc9 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7ff fac1 	bl	8000f8c <main>
  bx  lr    
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a18:	08007d68 	.word	0x08007d68
  ldr r2, =_sbss
 8001a1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a20:	20000760 	.word	0x20000760

08001a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_Init+0x40>)
 8001a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_Init+0x40>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x40>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f8fc 	bl	8001c4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	200f      	movs	r0, #15
 8001a58:	f7ff fc90 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fc66 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	2000074c 	.word	0x2000074c

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000074c 	.word	0x2000074c

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff4c 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c76:	f7ff ff61 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001c7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	6978      	ldr	r0, [r7, #20]
 8001c82:	f7ff ffb1 	bl	8001be8 <NVIC_EncodePriority>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff80 	bl	8001b94 <__NVIC_SetPriority>
}
 8001c94:	bf00      	nop
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff54 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fc76 	bl	80005cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cfe:	f7ff fec9 	bl	8001a94 <HAL_GetTick>
 8001d02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d008      	beq.n	8001d22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e052      	b.n	8001dc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0216 	bic.w	r2, r2, #22
 8001d30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <HAL_DMA_Abort+0x62>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0208 	bic.w	r2, r2, #8
 8001d60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d72:	e013      	b.n	8001d9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d74:	f7ff fe8e 	bl	8001a94 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d90c      	bls.n	8001d9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e015      	b.n	8001dc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1e4      	bne.n	8001d74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	223f      	movs	r2, #63	; 0x3f
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d004      	beq.n	8001dee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00c      	b.n	8001e08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2205      	movs	r2, #5
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e03b      	b.n	8001e9e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fc1a 	bl	8000674 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	f023 0107 	bic.w	r1, r3, #7
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68d1      	ldr	r1, [r2, #12]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d026      	beq.n	8001f16 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d021      	beq.n	8001f16 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d026      	beq.n	8001f6e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d021      	beq.n	8001f6e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f38:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2204      	movs	r2, #4
 8001f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d026      	beq.n	8001fc6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d021      	beq.n	8001fc6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f90:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2208      	movs	r2, #8
 8001f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	f043 0204 	orr.w	r2, r3, #4
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f853 	bl	800209e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d024      	beq.n	800204c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01f      	beq.n	800204c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800201a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2202      	movs	r2, #2
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01f      	beq.n	8002096 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01a      	beq.n	8002096 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800206e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2210      	movs	r2, #16
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f80e 	bl	80020b2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_DMA2D_ConfigLayer+0x20>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e079      	b.n	80021dc <HAL_DMA2D_ConfigLayer+0x114>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	3318      	adds	r3, #24
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002114:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b0a      	cmp	r3, #10
 800211c:	d003      	beq.n	8002126 <HAL_DMA2D_ConfigLayer+0x5e>
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b09      	cmp	r3, #9
 8002124:	d107      	bne.n	8002136 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e005      	b.n	8002142 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	061b      	lsls	r3, r3, #24
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d120      	bne.n	800218a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43db      	mvns	r3, r3
 8002152:	ea02 0103 	and.w	r1, r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	430a      	orrs	r2, r1
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d003      	beq.n	800217a <HAL_DMA2D_ConfigLayer+0xb2>
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b09      	cmp	r3, #9
 8002178:	d127      	bne.n	80021ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
 8002188:	e01f      	b.n	80021ca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	ea02 0103 	and.w	r1, r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	430a      	orrs	r2, r1
 80021a0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b0a      	cmp	r3, #10
 80021b2:	d003      	beq.n	80021bc <HAL_DMA2D_ConfigLayer+0xf4>
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d106      	bne.n	80021ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80021c8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	ff03000f 	.word	0xff03000f

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e177      	b.n	80024f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 8166 	bne.w	80024f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80c0 	beq.w	80024f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_GPIO_Init+0x324>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a65      	ldr	r2, [pc, #404]	; (8002510 <HAL_GPIO_Init+0x324>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_GPIO_Init+0x324>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a61      	ldr	r2, [pc, #388]	; (8002514 <HAL_GPIO_Init+0x328>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_GPIO_Init+0x32c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d037      	beq.n	800242a <HAL_GPIO_Init+0x23e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_GPIO_Init+0x330>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d031      	beq.n	8002426 <HAL_GPIO_Init+0x23a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a56      	ldr	r2, [pc, #344]	; (8002520 <HAL_GPIO_Init+0x334>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02b      	beq.n	8002422 <HAL_GPIO_Init+0x236>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a55      	ldr	r2, [pc, #340]	; (8002524 <HAL_GPIO_Init+0x338>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d025      	beq.n	800241e <HAL_GPIO_Init+0x232>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a54      	ldr	r2, [pc, #336]	; (8002528 <HAL_GPIO_Init+0x33c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a53      	ldr	r2, [pc, #332]	; (800252c <HAL_GPIO_Init+0x340>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x22a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_GPIO_Init+0x344>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a51      	ldr	r2, [pc, #324]	; (8002534 <HAL_GPIO_Init+0x348>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a50      	ldr	r2, [pc, #320]	; (8002538 <HAL_GPIO_Init+0x34c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_GPIO_Init+0x350>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x21a>
 8002402:	2309      	movs	r3, #9
 8002404:	e012      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002406:	230a      	movs	r3, #10
 8002408:	e010      	b.n	800242c <HAL_GPIO_Init+0x240>
 800240a:	2308      	movs	r3, #8
 800240c:	e00e      	b.n	800242c <HAL_GPIO_Init+0x240>
 800240e:	2307      	movs	r3, #7
 8002410:	e00c      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002412:	2306      	movs	r3, #6
 8002414:	e00a      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002416:	2305      	movs	r3, #5
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x240>
 800241a:	2304      	movs	r3, #4
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x240>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x240>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_GPIO_Init+0x328>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_GPIO_Init+0x354>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246e:	4a34      	ldr	r2, [pc, #208]	; (8002540 <HAL_GPIO_Init+0x354>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_GPIO_Init+0x354>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002498:	4a29      	ldr	r2, [pc, #164]	; (8002540 <HAL_GPIO_Init+0x354>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c2:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f ae84 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40013800 	.word	0x40013800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40021400 	.word	0x40021400
 8002530:	40021800 	.word	0x40021800
 8002534:	40021c00 	.word	0x40021c00
 8002538:	40022000 	.word	0x40022000
 800253c:	40022400 	.word	0x40022400
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002588:	887a      	ldrh	r2, [r7, #2]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	041a      	lsls	r2, r3, #16
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43d9      	mvns	r1, r3
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	400b      	ands	r3, r1
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ac:	b08f      	sub	sp, #60	; 0x3c
 80025ae:	af0a      	add	r7, sp, #40	; 0x28
 80025b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e054      	b.n	8002666 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff f99e 	bl	8001918 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fb4f 	bl	8006c9e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	687e      	ldr	r6, [r7, #4]
 8002608:	466d      	mov	r5, sp
 800260a:	f106 0410 	add.w	r4, r6, #16
 800260e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800261a:	e885 0003 	stmia.w	r5, {r0, r1}
 800261e:	1d33      	adds	r3, r6, #4
 8002620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002622:	6838      	ldr	r0, [r7, #0]
 8002624:	f004 fada 	bl	8006bdc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f004 fb46 	bl	8006cc0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	687e      	ldr	r6, [r7, #4]
 800263c:	466d      	mov	r5, sp
 800263e:	f106 0410 	add.w	r4, r6, #16
 8002642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800264e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002652:	1d33      	adds	r3, r6, #4
 8002654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	f004 fc90 	bl	8006f7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fc36 	bl	8006ef6 <USB_GetMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 80f6 	bne.w	800287e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fc1a 	bl	8006ed0 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80ec 	beq.w	800287c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fc11 	bl	8006ed0 <USB_ReadInterrupts>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026b8:	d104      	bne.n	80026c4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026c2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 fc01 	bl	8006ed0 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d8:	d104      	bne.n	80026e4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026e2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f004 fbf1 	bl	8006ed0 <USB_ReadInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f8:	d104      	bne.n	8002704 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002702:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f004 fbe1 	bl	8006ed0 <USB_ReadInterrupts>
 800270e:	4603      	mov	r3, r0
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b02      	cmp	r3, #2
 8002716:	d103      	bne.n	8002720 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fbd3 	bl	8006ed0 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002734:	d11c      	bne.n	8002770 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800273e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002750:	2110      	movs	r1, #16
 8002752:	6938      	ldr	r0, [r7, #16]
 8002754:	f004 fb00 	bl	8006d58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002758:	6938      	ldr	r0, [r7, #16]
 800275a:	f004 fb31 	bl	8006dc0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fcc9 	bl	80070fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f89e 	bl	80028ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f004 fbab 	bl	8006ed0 <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002784:	d102      	bne.n	800278c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f001 f84c 	bl	8003824 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f004 fb9d 	bl	8006ed0 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b08      	cmp	r3, #8
 800279e:	d106      	bne.n	80027ae <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f86f 	bl	8002884 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2208      	movs	r2, #8
 80027ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fb8c 	bl	8006ed0 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d101      	bne.n	80027c6 <HAL_HCD_IRQHandler+0x158>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_HCD_IRQHandler+0x15a>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d012      	beq.n	80027f2 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0210 	bic.w	r2, r2, #16
 80027da:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 ff4f 	bl	8003680 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699a      	ldr	r2, [r3, #24]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0210 	orr.w	r2, r2, #16
 80027f0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fb6a 	bl	8006ed0 <USB_ReadInterrupts>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002806:	d13a      	bne.n	800287e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f004 fcaf 	bl	8007170 <USB_HC_ReadInterrupt>
 8002812:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e025      	b.n	8002866 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d018      	beq.n	8002860 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002844:	d106      	bne.n	8002854 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f859 	bl	8002904 <HCD_HC_IN_IRQHandler>
 8002852:	e005      	b.n	8002860 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fba7 	bl	8002fae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	d3d4      	bcc.n	800281a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002878:	615a      	str	r2, [r3, #20]
 800287a:	e000      	b.n	800287e <HAL_HCD_IRQHandler+0x210>
      return;
 800287c:	bf00      	nop
    }
  }
}
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
 80028f4:	4613      	mov	r3, r2
 80028f6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11a      	bne.n	800296a <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	2304      	movs	r3, #4
 8002944:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3361      	adds	r3, #97	; 0x61
 8002954:	2206      	movs	r2, #6
 8002956:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f004 fc15 	bl	8007192 <USB_HC_Halt>
 8002968:	e0af      	b.n	8002aca <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002980:	d11b      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3361      	adds	r3, #97	; 0x61
 80029a4:	2207      	movs	r2, #7
 80029a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 fbed 	bl	8007192 <USB_HC_Halt>
 80029b8:	e087      	b.n	8002aca <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d109      	bne.n	80029e4 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	461a      	mov	r2, r3
 80029de:	2320      	movs	r3, #32
 80029e0:	6093      	str	r3, [r2, #8]
 80029e2:	e072      	b.n	8002aca <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11a      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	2308      	movs	r3, #8
 8002a0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3361      	adds	r3, #97	; 0x61
 8002a1a:	2205      	movs	r2, #5
 8002a1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fbb2 	bl	8007192 <USB_HC_Halt>
 8002a2e:	e04c      	b.n	8002aca <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a46:	d11b      	bne.n	8002a80 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3361      	adds	r3, #97	; 0x61
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 fb8a 	bl	8007192 <USB_HC_Halt>
 8002a7e:	e024      	b.n	8002aca <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d119      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3361      	adds	r3, #97	; 0x61
 8002ab6:	2206      	movs	r2, #6
 8002ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fb64 	bl	8007192 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d112      	bne.n	8002b08 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fb50 	bl	8007192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b04:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b06:	e24e      	b.n	8002fa6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	f040 80df 	bne.w	8002cde <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d019      	beq.n	8002b5c <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3348      	adds	r3, #72	; 0x48
 8002b36:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	0159      	lsls	r1, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b4a:	1ad2      	subs	r2, r2, r3
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	202c      	movs	r0, #44	; 0x2c
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	440b      	add	r3, r1
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3361      	adds	r3, #97	; 0x61
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	335c      	adds	r3, #92	; 0x5c
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2301      	movs	r3, #1
 8002b90:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	333f      	adds	r3, #63	; 0x3f
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	333f      	adds	r3, #63	; 0x3f
 8002bb4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d111      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 fae4 	bl	8007192 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2310      	movs	r3, #16
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	e03a      	b.n	8002c54 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	333f      	adds	r3, #63	; 0x3f
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d009      	beq.n	8002c06 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333f      	adds	r3, #63	; 0x3f
 8002c00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d126      	bne.n	8002c54 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	0151      	lsls	r1, r2, #5
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	440a      	add	r2, r1
 8002c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c24:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3360      	adds	r3, #96	; 0x60
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	b2d9      	uxtb	r1, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	202c      	movs	r0, #44	; 0x2c
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3360      	adds	r3, #96	; 0x60
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fe4a 	bl	80028e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d12b      	bne.n	8002cb4 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3348      	adds	r3, #72	; 0x48
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	202c      	movs	r0, #44	; 0x2c
 8002c72:	fb00 f202 	mul.w	r2, r0, r2
 8002c76:	440a      	add	r2, r1
 8002c78:	3240      	adds	r2, #64	; 0x40
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 818e 	beq.w	8002fa6 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3354      	adds	r3, #84	; 0x54
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2d8      	uxtb	r0, r3
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3354      	adds	r3, #84	; 0x54
 8002cae:	4602      	mov	r2, r0
 8002cb0:	701a      	strb	r2, [r3, #0]
}
 8002cb2:	e178      	b.n	8002fa6 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3354      	adds	r3, #84	; 0x54
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2d8      	uxtb	r0, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3354      	adds	r3, #84	; 0x54
 8002cd8:	4602      	mov	r2, r0
 8002cda:	701a      	strb	r2, [r3, #0]
}
 8002cdc:	e163      	b.n	8002fa6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f040 80f6 	bne.w	8002ee2 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3361      	adds	r3, #97	; 0x61
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d109      	bne.n	8002d1e <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e0c9      	b.n	8002eb2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3361      	adds	r3, #97	; 0x61
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d109      	bne.n	8002d46 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3360      	adds	r3, #96	; 0x60
 8002d40:	2205      	movs	r2, #5
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e0b5      	b.n	8002eb2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3361      	adds	r3, #97	; 0x61
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d009      	beq.n	8002d6e <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3361      	adds	r3, #97	; 0x61
 8002d68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d150      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	335c      	adds	r3, #92	; 0x5c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	202c      	movs	r0, #44	; 0x2c
 8002d86:	fb00 f303 	mul.w	r3, r0, r3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	335c      	adds	r3, #92	; 0x5c
 8002d8e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d912      	bls.n	8002dca <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	335c      	adds	r3, #92	; 0x5c
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3360      	adds	r3, #96	; 0x60
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dc8:	e073      	b.n	8002eb2 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3360      	adds	r3, #96	; 0x60
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dfa:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e0e:	e050      	b.n	8002eb2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3361      	adds	r3, #97	; 0x61
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d122      	bne.n	8002e6a <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3360      	adds	r3, #96	; 0x60
 8002e32:	2202      	movs	r2, #2
 8002e34:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e4c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e54:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e023      	b.n	8002eb2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3361      	adds	r3, #97	; 0x61
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b07      	cmp	r3, #7
 8002e7c:	d119      	bne.n	8002eb2 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	202c      	movs	r0, #44	; 0x2c
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	335c      	adds	r3, #92	; 0x5c
 8002e9e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	2204      	movs	r2, #4
 8002eb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	b2d9      	uxtb	r1, r3
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	202c      	movs	r0, #44	; 0x2c
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3360      	adds	r3, #96	; 0x60
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fd04 	bl	80028e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ee0:	e061      	b.n	8002fa6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d156      	bne.n	8002fa6 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	333f      	adds	r3, #63	; 0x3f
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d111      	bne.n	8002f30 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	335c      	adds	r3, #92	; 0x5c
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 f932 	bl	8007192 <USB_HC_Halt>
 8002f2e:	e031      	b.n	8002f94 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	333f      	adds	r3, #63	; 0x3f
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	333f      	adds	r3, #63	; 0x3f
 8002f52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d11d      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	335c      	adds	r3, #92	; 0x5c
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d110      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3361      	adds	r3, #97	; 0x61
 8002f80:	2203      	movs	r2, #3
 8002f82:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 f8ff 	bl	8007192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	6093      	str	r3, [r2, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b088      	sub	sp, #32
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d11a      	bne.n	8003014 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	2304      	movs	r3, #4
 8002fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3361      	adds	r3, #97	; 0x61
 8002ffe:	2206      	movs	r2, #6
 8003000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f004 f8c0 	bl	8007192 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003012:	e331      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d12e      	bne.n	8003088 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	461a      	mov	r2, r3
 8003038:	2320      	movs	r3, #32
 800303a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	333d      	adds	r3, #61	; 0x3d
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	f040 8313 	bne.w	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	333d      	adds	r3, #61	; 0x3d
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3360      	adds	r3, #96	; 0x60
 8003072:	2202      	movs	r2, #2
 8003074:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f004 f886 	bl	8007192 <USB_HC_Halt>
}
 8003086:	e2f7      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309e:	d112      	bne.n	80030c6 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 f867 	bl	8007192 <USB_HC_Halt>
}
 80030c4:	e2d8      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d140      	bne.n	800315e <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	335c      	adds	r3, #92	; 0x5c
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d111      	bne.n	8003128 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	333d      	adds	r3, #61	; 0x3d
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	461a      	mov	r2, r3
 8003124:	2340      	movs	r3, #64	; 0x40
 8003126:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	2301      	movs	r3, #1
 8003138:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3361      	adds	r3, #97	; 0x61
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f004 f81b 	bl	8007192 <USB_HC_Halt>
}
 800315c:	e28c      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d12c      	bne.n	80031ce <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3361      	adds	r3, #97	; 0x61
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	333d      	adds	r3, #61	; 0x3d
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	335c      	adds	r3, #92	; 0x5c
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 ffec 	bl	8007192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	6093      	str	r3, [r2, #8]
}
 80031cc:	e254      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d11a      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2308      	movs	r3, #8
 80031f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3361      	adds	r3, #97	; 0x61
 8003204:	2205      	movs	r2, #5
 8003206:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f003 ffbd 	bl	8007192 <USB_HC_Halt>
}
 8003218:	e22e      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d140      	bne.n	80032b2 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	335c      	adds	r3, #92	; 0x5c
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3361      	adds	r3, #97	; 0x61
 8003250:	2203      	movs	r2, #3
 8003252:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	333d      	adds	r3, #61	; 0x3d
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d112      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	333c      	adds	r3, #60	; 0x3c
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d108      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	333d      	adds	r3, #61	; 0x3d
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f003 ff7a 	bl	8007192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	461a      	mov	r2, r3
 80032ac:	2310      	movs	r3, #16
 80032ae:	6093      	str	r3, [r2, #8]
}
 80032b0:	e1e2      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d164      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3361      	adds	r3, #97	; 0x61
 80032de:	2206      	movs	r2, #6
 80032e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 ff50 	bl	8007192 <USB_HC_Halt>
 80032f2:	e044      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	335c      	adds	r3, #92	; 0x5c
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	202c      	movs	r0, #44	; 0x2c
 800330c:	fb00 f303 	mul.w	r3, r0, r3
 8003310:	440b      	add	r3, r1
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	335c      	adds	r3, #92	; 0x5c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d920      	bls.n	800336c <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	335c      	adds	r3, #92	; 0x5c
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3360      	adds	r3, #96	; 0x60
 800334a:	2204      	movs	r2, #4
 800334c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	b2d9      	uxtb	r1, r3
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	202c      	movs	r0, #44	; 0x2c
 8003358:	fb00 f303 	mul.w	r3, r0, r3
 800335c:	4413      	add	r3, r2
 800335e:	3360      	adds	r3, #96	; 0x60
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fabf 	bl	80028e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800336a:	e008      	b.n	800337e <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3360      	adds	r3, #96	; 0x60
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	461a      	mov	r2, r3
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	6093      	str	r3, [r2, #8]
}
 8003390:	e172      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d11b      	bne.n	80033e2 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3361      	adds	r3, #97	; 0x61
 80033b8:	2208      	movs	r2, #8
 80033ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 fee3 	bl	8007192 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033de:	6093      	str	r3, [r2, #8]
}
 80033e0:	e14a      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	f040 813f 	bne.w	8003678 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3361      	adds	r3, #97	; 0x61
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d17d      	bne.n	800350a <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	212c      	movs	r1, #44	; 0x2c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	3360      	adds	r3, #96	; 0x60
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	333f      	adds	r3, #63	; 0x3f
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d00a      	beq.n	800344a <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	333f      	adds	r3, #63	; 0x3f
 8003442:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003444:	2b03      	cmp	r3, #3
 8003446:	f040 8100 	bne.w	800364a <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d113      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	3355      	adds	r3, #85	; 0x55
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f083 0301 	eor.w	r3, r3, #1
 8003466:	b2d8      	uxtb	r0, r3
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3355      	adds	r3, #85	; 0x55
 8003476:	4602      	mov	r2, r0
 8003478:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b01      	cmp	r3, #1
 8003480:	f040 80e3 	bne.w	800364a <HCD_HC_OUT_IRQHandler+0x69c>
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	334c      	adds	r3, #76	; 0x4c
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80d8 	beq.w	800364a <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	334c      	adds	r3, #76	; 0x4c
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	202c      	movs	r0, #44	; 0x2c
 80034b0:	fb00 f202 	mul.w	r2, r0, r2
 80034b4:	440a      	add	r2, r1
 80034b6:	3240      	adds	r2, #64	; 0x40
 80034b8:	8812      	ldrh	r2, [r2, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	3b01      	subs	r3, #1
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	202c      	movs	r0, #44	; 0x2c
 80034c4:	fb00 f202 	mul.w	r2, r0, r2
 80034c8:	440a      	add	r2, r1
 80034ca:	3240      	adds	r2, #64	; 0x40
 80034cc:	8812      	ldrh	r2, [r2, #0]
 80034ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80b5 	beq.w	800364a <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3355      	adds	r3, #85	; 0x55
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f083 0301 	eor.w	r3, r3, #1
 80034f4:	b2d8      	uxtb	r0, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	212c      	movs	r1, #44	; 0x2c
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	3355      	adds	r3, #85	; 0x55
 8003504:	4602      	mov	r2, r0
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e09f      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	212c      	movs	r1, #44	; 0x2c
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	3361      	adds	r3, #97	; 0x61
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d109      	bne.n	8003532 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	3360      	adds	r3, #96	; 0x60
 800352c:	2202      	movs	r2, #2
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e08b      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3361      	adds	r3, #97	; 0x61
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d109      	bne.n	800355a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	3360      	adds	r3, #96	; 0x60
 8003554:	2202      	movs	r2, #2
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e077      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3361      	adds	r3, #97	; 0x61
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b05      	cmp	r3, #5
 800356c:	d109      	bne.n	8003582 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3360      	adds	r3, #96	; 0x60
 800357c:	2205      	movs	r2, #5
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e063      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3361      	adds	r3, #97	; 0x61
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b06      	cmp	r3, #6
 8003594:	d009      	beq.n	80035aa <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3361      	adds	r3, #97	; 0x61
 80035a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d14f      	bne.n	800364a <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	335c      	adds	r3, #92	; 0x5c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	202c      	movs	r0, #44	; 0x2c
 80035c2:	fb00 f303 	mul.w	r3, r0, r3
 80035c6:	440b      	add	r3, r1
 80035c8:	335c      	adds	r3, #92	; 0x5c
 80035ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	335c      	adds	r3, #92	; 0x5c
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d912      	bls.n	8003606 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	335c      	adds	r3, #92	; 0x5c
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	3360      	adds	r3, #96	; 0x60
 8003600:	2204      	movs	r2, #4
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e021      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	3360      	adds	r3, #96	; 0x60
 8003614:	2202      	movs	r2, #2
 8003616:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800362e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003636:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4413      	add	r3, r2
 8003652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003656:	461a      	mov	r2, r3
 8003658:	2302      	movs	r3, #2
 800365a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	b2d9      	uxtb	r1, r3
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	202c      	movs	r0, #44	; 0x2c
 8003666:	fb00 f303 	mul.w	r3, r0, r3
 800366a:	4413      	add	r3, r2
 800366c:	3360      	adds	r3, #96	; 0x60
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff f938 	bl	80028e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003678:	bf00      	nop
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	0c5b      	lsrs	r3, r3, #17
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d004      	beq.n	80036c6 <HCD_RXQLVL_IRQHandler+0x46>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	f000 80a9 	beq.w	8003816 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036c4:	e0aa      	b.n	800381c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a6 	beq.w	800381a <HCD_RXQLVL_IRQHandler+0x19a>
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3344      	adds	r3, #68	; 0x44
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 809b 	beq.w	800381a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3350      	adds	r3, #80	; 0x50
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	441a      	add	r2, r3
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	202c      	movs	r0, #44	; 0x2c
 80036fe:	fb00 f303 	mul.w	r3, r0, r3
 8003702:	440b      	add	r3, r1
 8003704:	334c      	adds	r3, #76	; 0x4c
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d87a      	bhi.n	8003802 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3344      	adds	r3, #68	; 0x44
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	b292      	uxth	r2, r2
 8003724:	4619      	mov	r1, r3
 8003726:	f003 fb7b 	bl	8006e20 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3344      	adds	r3, #68	; 0x44
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	441a      	add	r2, r3
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	202c      	movs	r0, #44	; 0x2c
 8003744:	fb00 f303 	mul.w	r3, r0, r3
 8003748:	440b      	add	r3, r1
 800374a:	3344      	adds	r3, #68	; 0x44
 800374c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3350      	adds	r3, #80	; 0x50
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	441a      	add	r2, r3
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	202c      	movs	r0, #44	; 0x2c
 8003768:	fb00 f303 	mul.w	r3, r0, r3
 800376c:	440b      	add	r3, r1
 800376e:	3350      	adds	r3, #80	; 0x50
 8003770:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	0cdb      	lsrs	r3, r3, #19
 8003782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003786:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3340      	adds	r3, #64	; 0x40
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4293      	cmp	r3, r2
 800379e:	d13c      	bne.n	800381a <HCD_RXQLVL_IRQHandler+0x19a>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d039      	beq.n	800381a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037bc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3354      	adds	r3, #84	; 0x54
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	f083 0301 	eor.w	r3, r3, #1
 80037ec:	b2d8      	uxtb	r0, r3
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3354      	adds	r3, #84	; 0x54
 80037fc:	4602      	mov	r2, r0
 80037fe:	701a      	strb	r2, [r3, #0]
      break;
 8003800:	e00b      	b.n	800381a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	3360      	adds	r3, #96	; 0x60
 8003810:	2204      	movs	r2, #4
 8003812:	701a      	strb	r2, [r3, #0]
      break;
 8003814:	e001      	b.n	800381a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800381a:	bf00      	nop
  }
}
 800381c:	bf00      	nop
 800381e:	3728      	adds	r7, #40	; 0x28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003850:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b02      	cmp	r3, #2
 800385a:	d10b      	bne.n	8003874 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff f816 	bl	8002898 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d132      	bne.n	80038e4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f043 0308 	orr.w	r3, r3, #8
 8003884:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b04      	cmp	r3, #4
 800388e:	d126      	bne.n	80038de <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d113      	bne.n	80038c0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800389e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a2:	d106      	bne.n	80038b2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 fc26 	bl	80070fc <USB_InitFSLSPClkSel>
 80038b0:	e011      	b.n	80038d6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 fc1f 	bl	80070fc <USB_InitFSLSPClkSel>
 80038be:	e00a      	b.n	80038d6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d106      	bne.n	80038d6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ce:	461a      	mov	r2, r3
 80038d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038d4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe fff2 	bl	80028c0 <HAL_HCD_PortEnabled_Callback>
 80038dc:	e002      	b.n	80038e4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fff8 	bl	80028d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d103      	bne.n	80038f6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f043 0320 	orr.w	r3, r3, #32
 80038f4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6013      	str	r3, [r2, #0]
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e12b      	b.n	8003b76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd f910 	bl	8000b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800395e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800396e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003970:	f001 f964 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 8003974:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4a81      	ldr	r2, [pc, #516]	; (8003b80 <HAL_I2C_Init+0x274>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d807      	bhi.n	8003990 <HAL_I2C_Init+0x84>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a80      	ldr	r2, [pc, #512]	; (8003b84 <HAL_I2C_Init+0x278>)
 8003984:	4293      	cmp	r3, r2
 8003986:	bf94      	ite	ls
 8003988:	2301      	movls	r3, #1
 800398a:	2300      	movhi	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e006      	b.n	800399e <HAL_I2C_Init+0x92>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a7d      	ldr	r2, [pc, #500]	; (8003b88 <HAL_I2C_Init+0x27c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	bf94      	ite	ls
 8003998:	2301      	movls	r3, #1
 800399a:	2300      	movhi	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0e7      	b.n	8003b76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a78      	ldr	r2, [pc, #480]	; (8003b8c <HAL_I2C_Init+0x280>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	0c9b      	lsrs	r3, r3, #18
 80039b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <HAL_I2C_Init+0x274>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d802      	bhi.n	80039e0 <HAL_I2C_Init+0xd4>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3301      	adds	r3, #1
 80039de:	e009      	b.n	80039f4 <HAL_I2C_Init+0xe8>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	4a69      	ldr	r2, [pc, #420]	; (8003b90 <HAL_I2C_Init+0x284>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	099b      	lsrs	r3, r3, #6
 80039f2:	3301      	adds	r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	495c      	ldr	r1, [pc, #368]	; (8003b80 <HAL_I2C_Init+0x274>)
 8003a10:	428b      	cmp	r3, r1
 8003a12:	d819      	bhi.n	8003a48 <HAL_I2C_Init+0x13c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e59      	subs	r1, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a22:	1c59      	adds	r1, r3, #1
 8003a24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a28:	400b      	ands	r3, r1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_I2C_Init+0x138>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1e59      	subs	r1, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a42:	e051      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003a44:	2304      	movs	r3, #4
 8003a46:	e04f      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d111      	bne.n	8003a74 <HAL_I2C_Init+0x168>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	e012      	b.n	8003a9a <HAL_I2C_Init+0x18e>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Init+0x196>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e022      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_I2C_Init+0x1bc>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e58      	subs	r0, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	440b      	add	r3, r1
 8003ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac6:	e00f      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e58      	subs	r0, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	0099      	lsls	r1, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	6809      	ldr	r1, [r1, #0]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6911      	ldr	r1, [r2, #16]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68d2      	ldr	r2, [r2, #12]
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	000186a0 	.word	0x000186a0
 8003b84:	001e847f 	.word	0x001e847f
 8003b88:	003d08ff 	.word	0x003d08ff
 8003b8c:	431bde83 	.word	0x431bde83
 8003b90:	10624dd3 	.word	0x10624dd3

08003b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d129      	bne.n	8003bfe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2224      	movs	r2, #36	; 0x24
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0210 	bic.w	r2, r2, #16
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d12a      	bne.n	8003c7c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2224      	movs	r2, #36	; 0x24
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	f023 030f 	bic.w	r3, r3, #15
 8003c4c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	89fa      	ldrh	r2, [r7, #14]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0bf      	b.n	8003e1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fd f83a 	bl	8000d2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003cce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ce4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <HAL_LTDC_Init+0x19c>)
 8003d00:	400b      	ands	r3, r1
 8003d02:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68d9      	ldr	r1, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_LTDC_Init+0x19c>)
 8003d2e:	400b      	ands	r3, r1
 8003d30:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	041b      	lsls	r3, r3, #16
 8003d38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68d9      	ldr	r1, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1a      	ldr	r2, [r3, #32]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <HAL_LTDC_Init+0x19c>)
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6919      	ldr	r1, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6959      	ldr	r1, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_LTDC_Init+0x19c>)
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6959      	ldr	r1, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0206 	orr.w	r2, r2, #6
 8003dfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	f000f800 	.word	0xf000f800

08003e2c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d023      	beq.n	8003e96 <HAL_LTDC_IRQHandler+0x6a>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01e      	beq.n	8003e96 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2204      	movs	r2, #4
 8003e84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f86f 	bl	8003f74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d023      	beq.n	8003ee8 <HAL_LTDC_IRQHandler+0xbc>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01e      	beq.n	8003ee8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0202 	bic.w	r2, r2, #2
 8003eb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ec8:	f043 0202 	orr.w	r2, r3, #2
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f846 	bl	8003f74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01b      	beq.n	8003f2a <HAL_LTDC_IRQHandler+0xfe>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2201      	movs	r2, #1
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f82f 	bl	8003f88 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_LTDC_IRQHandler+0x140>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d016      	beq.n	8003f6c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0208 	bic.w	r2, r2, #8
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2208      	movs	r2, #8
 8003f54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f818 	bl	8003f9c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fb0:	b5b0      	push	{r4, r5, r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_LTDC_ConfigLayer+0x1a>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e02c      	b.n	8004024 <HAL_LTDC_ConfigLayer+0x74>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2134      	movs	r1, #52	; 0x34
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4614      	mov	r4, r2
 8003fee:	461d      	mov	r5, r3
 8003ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f811 	bl	800402c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2201      	movs	r2, #1
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bdb0      	pop	{r4, r5, r7, pc}

0800402c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004048:	4413      	add	r3, r2
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	01db      	lsls	r3, r3, #7
 8004058:	4413      	add	r3, r2
 800405a:	3384      	adds	r3, #132	; 0x84
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4611      	mov	r1, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	01d2      	lsls	r2, r2, #7
 8004068:	440a      	add	r2, r1
 800406a:	3284      	adds	r2, #132	; 0x84
 800406c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004070:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004082:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004084:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4619      	mov	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	01db      	lsls	r3, r3, #7
 8004090:	440b      	add	r3, r1
 8004092:	3384      	adds	r3, #132	; 0x84
 8004094:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800409a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040aa:	4413      	add	r3, r2
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	01db      	lsls	r3, r3, #7
 80040ba:	4413      	add	r3, r2
 80040bc:	3384      	adds	r3, #132	; 0x84
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	4611      	mov	r1, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	01d2      	lsls	r2, r2, #7
 80040ca:	440a      	add	r2, r1
 80040cc:	3284      	adds	r2, #132	; 0x84
 80040ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040e2:	4413      	add	r3, r2
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4619      	mov	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	01db      	lsls	r3, r3, #7
 80040f0:	440b      	add	r3, r1
 80040f2:	3384      	adds	r3, #132	; 0x84
 80040f4:	4619      	mov	r1, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	4413      	add	r3, r2
 8004108:	3384      	adds	r3, #132	; 0x84
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	4611      	mov	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	01d2      	lsls	r2, r2, #7
 8004116:	440a      	add	r2, r1
 8004118:	3284      	adds	r2, #132	; 0x84
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	01db      	lsls	r3, r3, #7
 800412a:	4413      	add	r3, r2
 800412c:	3384      	adds	r3, #132	; 0x84
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	01db      	lsls	r3, r3, #7
 800415c:	4413      	add	r3, r2
 800415e:	3384      	adds	r3, #132	; 0x84
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	01db      	lsls	r3, r3, #7
 800416c:	4413      	add	r3, r2
 800416e:	3384      	adds	r3, #132	; 0x84
 8004170:	461a      	mov	r2, r3
 8004172:	2300      	movs	r3, #0
 8004174:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800417c:	461a      	mov	r2, r3
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	431a      	orrs	r2, r3
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4619      	mov	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	01db      	lsls	r3, r3, #7
 8004190:	440b      	add	r3, r1
 8004192:	3384      	adds	r3, #132	; 0x84
 8004194:	4619      	mov	r1, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	01db      	lsls	r3, r3, #7
 80041a6:	4413      	add	r3, r2
 80041a8:	3384      	adds	r3, #132	; 0x84
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	4611      	mov	r1, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	01d2      	lsls	r2, r2, #7
 80041b6:	440a      	add	r2, r1
 80041b8:	3284      	adds	r2, #132	; 0x84
 80041ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	01db      	lsls	r3, r3, #7
 80041ca:	4413      	add	r3, r2
 80041cc:	3384      	adds	r3, #132	; 0x84
 80041ce:	461a      	mov	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	01db      	lsls	r3, r3, #7
 80041e0:	4413      	add	r3, r2
 80041e2:	3384      	adds	r3, #132	; 0x84
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	4611      	mov	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	01d2      	lsls	r2, r2, #7
 80041f0:	440a      	add	r2, r1
 80041f2:	3284      	adds	r2, #132	; 0x84
 80041f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041f8:	f023 0307 	bic.w	r3, r3, #7
 80041fc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	6809      	ldr	r1, [r1, #0]
 800420a:	4608      	mov	r0, r1
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	01c9      	lsls	r1, r1, #7
 8004210:	4401      	add	r1, r0
 8004212:	3184      	adds	r1, #132	; 0x84
 8004214:	4313      	orrs	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	01db      	lsls	r3, r3, #7
 8004222:	4413      	add	r3, r2
 8004224:	3384      	adds	r3, #132	; 0x84
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	4413      	add	r3, r2
 8004234:	3384      	adds	r3, #132	; 0x84
 8004236:	461a      	mov	r2, r3
 8004238:	2300      	movs	r3, #0
 800423a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	01db      	lsls	r3, r3, #7
 8004246:	4413      	add	r3, r2
 8004248:	3384      	adds	r3, #132	; 0x84
 800424a:	461a      	mov	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800425a:	2304      	movs	r3, #4
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e01b      	b.n	8004298 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d102      	bne.n	800426e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004268:	2303      	movs	r3, #3
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e014      	b.n	8004298 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00b      	beq.n	800428e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800427a:	2b02      	cmp	r3, #2
 800427c:	d007      	beq.n	800428e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004282:	2b03      	cmp	r3, #3
 8004284:	d003      	beq.n	800428e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800428a:	2b07      	cmp	r3, #7
 800428c:	d102      	bne.n	8004294 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800428e:	2302      	movs	r3, #2
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	e001      	b.n	8004298 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004294:	2301      	movs	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	01db      	lsls	r3, r3, #7
 80042a2:	4413      	add	r3, r2
 80042a4:	3384      	adds	r3, #132	; 0x84
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	4611      	mov	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	01d2      	lsls	r2, r2, #7
 80042b2:	440a      	add	r2, r1
 80042b4:	3284      	adds	r2, #132	; 0x84
 80042b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	1acb      	subs	r3, r1, r3
 80042d2:	69f9      	ldr	r1, [r7, #28]
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	6809      	ldr	r1, [r1, #0]
 80042de:	4608      	mov	r0, r1
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	01c9      	lsls	r1, r1, #7
 80042e4:	4401      	add	r1, r0
 80042e6:	3184      	adds	r1, #132	; 0x84
 80042e8:	4313      	orrs	r3, r2
 80042ea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	01db      	lsls	r3, r3, #7
 80042f6:	4413      	add	r3, r2
 80042f8:	3384      	adds	r3, #132	; 0x84
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	4611      	mov	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	01d2      	lsls	r2, r2, #7
 8004306:	440a      	add	r2, r1
 8004308:	3284      	adds	r2, #132	; 0x84
 800430a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	01db      	lsls	r3, r3, #7
 800431e:	4413      	add	r3, r2
 8004320:	3384      	adds	r3, #132	; 0x84
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	01db      	lsls	r3, r3, #7
 8004334:	4413      	add	r3, r2
 8004336:	3384      	adds	r3, #132	; 0x84
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	4611      	mov	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	01d2      	lsls	r2, r2, #7
 8004344:	440a      	add	r2, r1
 8004346:	3284      	adds	r2, #132	; 0x84
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6013      	str	r3, [r2, #0]
}
 800434e:	bf00      	nop
 8004350:	3724      	adds	r7, #36	; 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e267      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d075      	beq.n	8004466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437a:	4b88      	ldr	r3, [pc, #544]	; (800459c <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00c      	beq.n	80043a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004386:	4b85      	ldr	r3, [pc, #532]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438e:	2b08      	cmp	r3, #8
 8004390:	d112      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004392:	4b82      	ldr	r3, [pc, #520]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439e:	d10b      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	4b7e      	ldr	r3, [pc, #504]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05b      	beq.n	8004464 <HAL_RCC_OscConfig+0x108>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d157      	bne.n	8004464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e242      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d106      	bne.n	80043d0 <HAL_RCC_OscConfig+0x74>
 80043c2:	4b76      	ldr	r3, [pc, #472]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a75      	ldr	r2, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e01d      	b.n	800440c <HAL_RCC_OscConfig+0xb0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x98>
 80043da:	4b70      	ldr	r3, [pc, #448]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6f      	ldr	r2, [pc, #444]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b6d      	ldr	r3, [pc, #436]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6c      	ldr	r2, [pc, #432]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0xb0>
 80043f4:	4b69      	ldr	r3, [pc, #420]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a68      	ldr	r2, [pc, #416]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b66      	ldr	r3, [pc, #408]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a65      	ldr	r2, [pc, #404]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fd fb3e 	bl	8001a94 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fd fb3a 	bl	8001a94 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e207      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b5b      	ldr	r3, [pc, #364]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0xc0>
 800443a:	e014      	b.n	8004466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fd fb2a 	bl	8001a94 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004444:	f7fd fb26 	bl	8001a94 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1f3      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	4b51      	ldr	r3, [pc, #324]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0xe8>
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d063      	beq.n	800453a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004472:	4b4a      	ldr	r3, [pc, #296]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447e:	4b47      	ldr	r3, [pc, #284]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004486:	2b08      	cmp	r3, #8
 8004488:	d11c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <HAL_RCC_OscConfig+0x240>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d116      	bne.n	80044c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_RCC_OscConfig+0x152>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e1c7      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ae:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4937      	ldr	r1, [pc, #220]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	e03a      	b.n	800453a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <HAL_RCC_OscConfig+0x244>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fd fadf 	bl	8001a94 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044da:	f7fd fadb 	bl	8001a94 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1a8      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4925      	ldr	r1, [pc, #148]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	e015      	b.n	800453a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_RCC_OscConfig+0x244>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fabe 	bl	8001a94 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451c:	f7fd faba 	bl	8001a94 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e187      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d036      	beq.n	80045b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_RCC_OscConfig+0x248>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd fa9e 	bl	8001a94 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455c:	f7fd fa9a 	bl	8001a94 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e167      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_OscConfig+0x240>)
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x200>
 800457a:	e01b      	b.n	80045b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCC_OscConfig+0x248>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004582:	f7fd fa87 	bl	8001a94 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	e00e      	b.n	80045a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800458a:	f7fd fa83 	bl	8001a94 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d907      	bls.n	80045a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e150      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
 800459c:	40023800 	.word	0x40023800
 80045a0:	42470000 	.word	0x42470000
 80045a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ea      	bne.n	800458a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8097 	beq.w	80046f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c6:	4b81      	ldr	r3, [pc, #516]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a7c      	ldr	r2, [pc, #496]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f2:	4b77      	ldr	r3, [pc, #476]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d118      	bne.n	8004630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fe:	4b74      	ldr	r3, [pc, #464]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a73      	ldr	r2, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460a:	f7fd fa43 	bl	8001a94 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004612:	f7fd fa3f 	bl	8001a94 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e10c      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_OscConfig+0x474>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d106      	bne.n	8004646 <HAL_RCC_OscConfig+0x2ea>
 8004638:	4b64      	ldr	r3, [pc, #400]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a63      	ldr	r2, [pc, #396]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	e01c      	b.n	8004680 <HAL_RCC_OscConfig+0x324>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b05      	cmp	r3, #5
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0x30c>
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a5e      	ldr	r2, [pc, #376]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	4b5c      	ldr	r3, [pc, #368]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a5b      	ldr	r2, [pc, #364]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0x324>
 8004668:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a54      	ldr	r2, [pc, #336]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 800467a:	f023 0304 	bic.w	r3, r3, #4
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fd fa04 	bl	8001a94 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fd fa00 	bl	8001a94 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0cb      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	4b49      	ldr	r3, [pc, #292]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ee      	beq.n	8004690 <HAL_RCC_OscConfig+0x334>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b4:	f7fd f9ee 	bl	8001a94 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046bc:	f7fd f9ea 	bl	8001a94 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0b5      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d2:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ee      	bne.n	80046bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e4:	4b39      	ldr	r3, [pc, #228]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	4a38      	ldr	r2, [pc, #224]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a1 	beq.w	800483c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fa:	4b34      	ldr	r3, [pc, #208]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b08      	cmp	r3, #8
 8004704:	d05c      	beq.n	80047c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d141      	bne.n	8004792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fd f9be 	bl	8001a94 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471c:	f7fd f9ba 	bl	8001a94 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e087      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	4b27      	ldr	r3, [pc, #156]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	019b      	lsls	r3, r3, #6
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	3b01      	subs	r3, #1
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	491b      	ldr	r1, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476a:	f7fd f993 	bl	8001a94 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004772:	f7fd f98f 	bl	8001a94 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e05c      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x416>
 8004790:	e054      	b.n	800483c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_OscConfig+0x478>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fd f97c 	bl	8001a94 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd f978 	bl	8001a94 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e045      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_OscConfig+0x470>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x444>
 80047be:	e03d      	b.n	800483c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e038      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40007000 	.word	0x40007000
 80047d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <HAL_RCC_OscConfig+0x4ec>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d028      	beq.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d121      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d11a      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004810:	4293      	cmp	r3, r2
 8004812:	d111      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	3b01      	subs	r3, #1
 8004822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800

0800484c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0cc      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004860:	4b68      	ldr	r3, [pc, #416]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d90c      	bls.n	8004888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0b8      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d020      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	494d      	ldr	r1, [pc, #308]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d044      	beq.n	800496c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d119      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d003      	beq.n	800490a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004906:	2b03      	cmp	r3, #3
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491a:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e067      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 0203 	bic.w	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4934      	ldr	r1, [pc, #208]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800493c:	f7fd f8aa 	bl	8001a94 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	e00a      	b.n	800495a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fd f8a6 	bl	8001a94 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e04f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 020c 	and.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	429a      	cmp	r2, r3
 800496a:	d1eb      	bne.n	8004944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d20c      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e032      	b.n	80049fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	490e      	ldr	r1, [pc, #56]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d2:	f000 f821 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	5ccb      	ldrb	r3, [r1, r3]
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fc fcc2 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023c00 	.word	0x40023c00
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	08007d0c 	.word	0x08007d0c
 8004a10:	20000000 	.word	0x20000000
 8004a14:	20000004 	.word	0x20000004

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a1c:	b094      	sub	sp, #80	; 0x50
 8004a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
 8004a24:	2300      	movs	r3, #0
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a28:	2300      	movs	r3, #0
 8004a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a30:	4b79      	ldr	r3, [pc, #484]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d00d      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x40>
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	f200 80e1 	bhi.w	8004c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4a:	e0db      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a50:	e0db      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a52:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a56:	e0d8      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a58:	4b6f      	ldr	r3, [pc, #444]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d063      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	2200      	movs	r2, #0
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
 8004a82:	2300      	movs	r3, #0
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
 8004a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f04f 0000 	mov.w	r0, #0
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	0159      	lsls	r1, r3, #5
 8004a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9c:	0150      	lsls	r0, r2, #5
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	1a51      	subs	r1, r2, r1
 8004aa6:	6139      	str	r1, [r7, #16]
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abc:	4659      	mov	r1, fp
 8004abe:	018b      	lsls	r3, r1, #6
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	018a      	lsls	r2, r1, #6
 8004aca:	4651      	mov	r1, sl
 8004acc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aea:	4690      	mov	r8, r2
 8004aec:	4699      	mov	r9, r3
 8004aee:	4623      	mov	r3, r4
 8004af0:	eb18 0303 	adds.w	r3, r8, r3
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	462b      	mov	r3, r5
 8004af8:	eb49 0303 	adc.w	r3, r9, r3
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	024b      	lsls	r3, r1, #9
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b14:	4621      	mov	r1, r4
 8004b16:	024a      	lsls	r2, r1, #9
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	2200      	movs	r2, #0
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b28:	f7fb fbba 	bl	80002a0 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	e058      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b36:	4b38      	ldr	r3, [pc, #224]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	4611      	mov	r1, r2
 8004b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	0159      	lsls	r1, r3, #5
 8004b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b62:	0150      	lsls	r0, r2, #5
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4641      	mov	r1, r8
 8004b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b88:	ebb2 040a 	subs.w	r4, r2, sl
 8004b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	00eb      	lsls	r3, r5, #3
 8004b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9e:	00e2      	lsls	r2, r4, #3
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	4643      	mov	r3, r8
 8004ba6:	18e3      	adds	r3, r4, r3
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	464b      	mov	r3, r9
 8004bac:	eb45 0303 	adc.w	r3, r5, r3
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	028b      	lsls	r3, r1, #10
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc8:	4621      	mov	r1, r4
 8004bca:	028a      	lsls	r2, r1, #10
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	61fa      	str	r2, [r7, #28]
 8004bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bdc:	f7fb fb60 	bl	80002a0 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3750      	adds	r7, #80	; 0x50
 8004c10:	46bd      	mov	sp, r7
 8004c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	007a1200 	.word	0x007a1200

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000000 	.word	0x20000000

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08007d1c 	.word	0x08007d1c

08004c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c68:	f7ff ffdc 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0b5b      	lsrs	r3, r3, #13
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4903      	ldr	r1, [pc, #12]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	08007d1c 	.word	0x08007d1c

08004c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	220f      	movs	r2, #15
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0203 	and.w	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	08db      	lsrs	r3, r3, #3
 8004cc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <HAL_RCC_GetClockConfig+0x60>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 020f 	and.w	r2, r3, #15
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40023c00 	.word	0x40023c00

08004cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d075      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d24:	4b91      	ldr	r3, [pc, #580]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc feb3 	bl	8001a94 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d32:	f7fc feaf 	bl	8001a94 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e189      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d44:	4b8a      	ldr	r3, [pc, #552]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	019a      	lsls	r2, r3, #6
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	071b      	lsls	r3, r3, #28
 8004d68:	4981      	ldr	r1, [pc, #516]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01f      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d7c:	4b7c      	ldr	r3, [pc, #496]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d82:	0f1b      	lsrs	r3, r3, #28
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	019a      	lsls	r2, r3, #6
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	431a      	orrs	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	071b      	lsls	r3, r3, #28
 8004d9c:	4974      	ldr	r1, [pc, #464]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004da4:	4b72      	ldr	r3, [pc, #456]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004daa:	f023 021f 	bic.w	r2, r3, #31
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	496e      	ldr	r1, [pc, #440]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	019a      	lsls	r2, r3, #6
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	071b      	lsls	r3, r3, #28
 8004ddc:	4964      	ldr	r1, [pc, #400]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004de4:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dea:	f7fc fe53 	bl	8001a94 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004df2:	f7fc fe4f 	bl	8001a94 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e129      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e04:	4b5a      	ldr	r3, [pc, #360]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d079      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e28:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e2e:	f7fc fe31 	bl	8001a94 <HAL_GetTick>
 8004e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e36:	f7fc fe2d 	bl	8001a94 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e107      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e48:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e54:	d0ef      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d020      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e62:	4b43      	ldr	r3, [pc, #268]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	0f1b      	lsrs	r3, r3, #28
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	019a      	lsls	r2, r3, #6
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	493b      	ldr	r1, [pc, #236]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e8a:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	4934      	ldr	r1, [pc, #208]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01e      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eb0:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	0e1b      	lsrs	r3, r3, #24
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	019a      	lsls	r2, r3, #6
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	061b      	lsls	r3, r3, #24
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	071b      	lsls	r3, r3, #28
 8004ed0:	4927      	ldr	r1, [pc, #156]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ede:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	4922      	ldr	r1, [pc, #136]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eee:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef4:	f7fc fdce 	bl	8001a94 <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004efc:	f7fc fdca 	bl	8001a94 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0a4      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1a:	d1ef      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 808b 	beq.w	8005040 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4a0f      	ldr	r2, [pc, #60]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f38:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a0b      	ldr	r2, [pc, #44]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f52:	f7fc fd9f 	bl	8001a94 <HAL_GetTick>
 8004f56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f58:	e010      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fc fd9b 	bl	8001a94 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d909      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e075      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f6c:	42470068 	.word	0x42470068
 8004f70:	40023800 	.word	0x40023800
 8004f74:	42470070 	.word	0x42470070
 8004f78:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f7c:	4b38      	ldr	r3, [pc, #224]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0e8      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f88:	4b36      	ldr	r3, [pc, #216]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02f      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d028      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa6:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb6:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fbc:	4a29      	ldr	r2, [pc, #164]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fc2:	4b28      	ldr	r3, [pc, #160]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d114      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fce:	f7fc fd61 	bl	8001a94 <HAL_GetTick>
 8004fd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd4:	e00a      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fc fd5d 	bl	8001a94 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e035      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ee      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005004:	d10d      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005006:	4b17      	ldr	r3, [pc, #92]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501a:	4912      	ldr	r1, [pc, #72]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]
 8005020:	e005      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	4a0f      	ldr	r2, [pc, #60]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005028:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800502c:	6093      	str	r3, [r2, #8]
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800503c:	4313      	orrs	r3, r2
 800503e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005054:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40007000 	.word	0x40007000
 8005064:	40023800 	.word	0x40023800
 8005068:	42470e40 	.word	0x42470e40
 800506c:	424711e0 	.word	0x424711e0

08005070 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e025      	b.n	80050d0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fb fbf5 	bl	8000888 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f001 fccd 	bl	8006a50 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	461a      	mov	r2, r3
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	f001 fd22 	bl	8006b0a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e07b      	b.n	80051e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fa:	d009      	beq.n	8005110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	61da      	str	r2, [r3, #28]
 8005102:	e005      	b.n	8005110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc f8b6 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	ea42 0103 	orr.w	r1, r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	f003 0104 	and.w	r1, r3, #4
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0210 	and.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e041      	b.n	8005280 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7fc fa2f 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f000 fa95 	bl	8005758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e04e      	b.n	800533e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a23      	ldr	r2, [pc, #140]	; (800534c <HAL_TIM_Base_Start_IT+0xc4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ca:	d01d      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1f      	ldr	r2, [pc, #124]	; (8005350 <HAL_TIM_Base_Start_IT+0xc8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <HAL_TIM_Base_Start_IT+0xcc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <HAL_TIM_Base_Start_IT+0xd0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	; (800535c <HAL_TIM_Base_Start_IT+0xd4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <HAL_TIM_Base_Start_IT+0xd8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x80>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a18      	ldr	r2, [pc, #96]	; (8005364 <HAL_TIM_Base_Start_IT+0xdc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d111      	bne.n	800532c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b06      	cmp	r3, #6
 8005318:	d010      	beq.n	800533c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	e007      	b.n	800533c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40010000 	.word	0x40010000
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	40010400 	.word	0x40010400
 8005360:	40014000 	.word	0x40014000
 8005364:	40001800 	.word	0x40001800

08005368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0202 	mvn.w	r2, #2
 8005394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9b5 	bl	800571a <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f9a7 	bl	8005706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f9b8 	bl	800572e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d122      	bne.n	8005418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11b      	bne.n	8005418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0204 	mvn.w	r2, #4
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f98b 	bl	800571a <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f97d 	bl	8005706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f98e 	bl	800572e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b08      	cmp	r3, #8
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0208 	mvn.w	r2, #8
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2204      	movs	r2, #4
 8005442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f961 	bl	800571a <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f953 	bl	8005706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f964 	bl	800572e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b10      	cmp	r3, #16
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0210 	mvn.w	r2, #16
 8005490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2208      	movs	r2, #8
 8005496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f937 	bl	800571a <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f929 	bl	8005706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f93a 	bl	800572e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0201 	mvn.w	r2, #1
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb fe8a 	bl	8001200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fae0 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d10e      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8ff 	bl	8005742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d10e      	bne.n	8005570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b20      	cmp	r3, #32
 800555e:	d107      	bne.n	8005570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0220 	mvn.w	r2, #32
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 faaa 	bl	8005ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_TIM_ConfigClockSource+0x1c>
 8005590:	2302      	movs	r3, #2
 8005592:	e0b4      	b.n	80056fe <HAL_TIM_ConfigClockSource+0x186>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055cc:	d03e      	beq.n	800564c <HAL_TIM_ConfigClockSource+0xd4>
 80055ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d2:	f200 8087 	bhi.w	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	f000 8086 	beq.w	80056ea <HAL_TIM_ConfigClockSource+0x172>
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e2:	d87f      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b70      	cmp	r3, #112	; 0x70
 80055e6:	d01a      	beq.n	800561e <HAL_TIM_ConfigClockSource+0xa6>
 80055e8:	2b70      	cmp	r3, #112	; 0x70
 80055ea:	d87b      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b60      	cmp	r3, #96	; 0x60
 80055ee:	d050      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x11a>
 80055f0:	2b60      	cmp	r3, #96	; 0x60
 80055f2:	d877      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b50      	cmp	r3, #80	; 0x50
 80055f6:	d03c      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0xfa>
 80055f8:	2b50      	cmp	r3, #80	; 0x50
 80055fa:	d873      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d058      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d86f      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d064      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005608:	2b30      	cmp	r3, #48	; 0x30
 800560a:	d86b      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b20      	cmp	r3, #32
 800560e:	d060      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d867      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d05c      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005618:	2b10      	cmp	r3, #16
 800561a:	d05a      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	e062      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6899      	ldr	r1, [r3, #8]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f000 f9ad 	bl	800598c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	609a      	str	r2, [r3, #8]
      break;
 800564a:	e04f      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6899      	ldr	r1, [r3, #8]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f000 f996 	bl	800598c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566e:	609a      	str	r2, [r3, #8]
      break;
 8005670:	e03c      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	461a      	mov	r2, r3
 8005680:	f000 f90a 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2150      	movs	r1, #80	; 0x50
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f963 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 8005690:	e02c      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6859      	ldr	r1, [r3, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	461a      	mov	r2, r3
 80056a0:	f000 f929 	bl	80058f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2160      	movs	r1, #96	; 0x60
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f953 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80056b0:	e01c      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6859      	ldr	r1, [r3, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	461a      	mov	r2, r3
 80056c0:	f000 f8ea 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2140      	movs	r1, #64	; 0x40
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f943 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80056d0:	e00c      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4619      	mov	r1, r3
 80056dc:	4610      	mov	r0, r2
 80056de:	f000 f93a 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80056e2:	e003      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
      break;
 80056e8:	e000      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a40      	ldr	r2, [pc, #256]	; (800586c <TIM_Base_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d00f      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a3d      	ldr	r2, [pc, #244]	; (8005870 <TIM_Base_SetConfig+0x118>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a3c      	ldr	r2, [pc, #240]	; (8005874 <TIM_Base_SetConfig+0x11c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3b      	ldr	r2, [pc, #236]	; (8005878 <TIM_Base_SetConfig+0x120>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a3a      	ldr	r2, [pc, #232]	; (800587c <TIM_Base_SetConfig+0x124>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2f      	ldr	r2, [pc, #188]	; (800586c <TIM_Base_SetConfig+0x114>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d02b      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d027      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2c      	ldr	r2, [pc, #176]	; (8005870 <TIM_Base_SetConfig+0x118>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d023      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2b      	ldr	r2, [pc, #172]	; (8005874 <TIM_Base_SetConfig+0x11c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01f      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <TIM_Base_SetConfig+0x120>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d01b      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a29      	ldr	r2, [pc, #164]	; (800587c <TIM_Base_SetConfig+0x124>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d017      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <TIM_Base_SetConfig+0x128>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <TIM_Base_SetConfig+0x12c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00f      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a26      	ldr	r2, [pc, #152]	; (8005888 <TIM_Base_SetConfig+0x130>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00b      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a25      	ldr	r2, [pc, #148]	; (800588c <TIM_Base_SetConfig+0x134>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a24      	ldr	r2, [pc, #144]	; (8005890 <TIM_Base_SetConfig+0x138>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a23      	ldr	r2, [pc, #140]	; (8005894 <TIM_Base_SetConfig+0x13c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d108      	bne.n	800581c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <TIM_Base_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_Base_SetConfig+0xf8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a0c      	ldr	r2, [pc, #48]	; (800587c <TIM_Base_SetConfig+0x124>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	615a      	str	r2, [r3, #20]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40010400 	.word	0x40010400
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800
 800588c:	40001800 	.word	0x40001800
 8005890:	40001c00 	.word	0x40001c00
 8005894:	40002000 	.word	0x40002000

08005898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 030a 	bic.w	r3, r3, #10
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b087      	sub	sp, #28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f023 0210 	bic.w	r2, r3, #16
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	f043 0307 	orr.w	r3, r3, #7
 8005978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	609a      	str	r2, [r3, #8]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	609a      	str	r2, [r3, #8]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e05a      	b.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d01d      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1d      	ldr	r2, [pc, #116]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a17      	ldr	r2, [pc, #92]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10c      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40010400 	.word	0x40010400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40001800 	.word	0x40001800

08005ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e03f      	b.n	8005b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb fe24 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	; 0x24
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fd19 	bl	8006568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	4613      	mov	r3, r2
 8005b92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d130      	bne.n	8005c02 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_UART_Transmit_IT+0x26>
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e029      	b.n	8005c04 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Transmit_IT+0x38>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e022      	b.n	8005c04 <HAL_UART_Transmit_IT+0x7e>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	88fa      	ldrh	r2, [r7, #6]
 8005bd6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2221      	movs	r2, #33	; 0x21
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bfc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e000      	b.n	8005c04 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d11d      	bne.n	8005c66 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_UART_Receive_IT+0x26>
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e016      	b.n	8005c68 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Receive_IT+0x38>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e00f      	b.n	8005c68 <HAL_UART_Receive_IT+0x58>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 faab 	bl	80061b8 <UART_Start_Receive_IT>
 8005c62:	4603      	mov	r3, r0
 8005c64:	e000      	b.n	8005c68 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
  }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b0ba      	sub	sp, #232	; 0xe8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10f      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x66>
 8005cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fb8f 	bl	80063f2 <UART_Receive_IT>
      return;
 8005cd4:	e256      	b.n	8006184 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 80de 	beq.w	8005e9c <HAL_UART_IRQHandler+0x22c>
 8005ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80d1 	beq.w	8005e9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_UART_IRQHandler+0xae>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f043 0201 	orr.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <HAL_UART_IRQHandler+0xd2>
 8005d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f043 0202 	orr.w	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_UART_IRQHandler+0xf6>
 8005d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0204 	orr.w	r2, r3, #4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d011      	beq.n	8005d96 <HAL_UART_IRQHandler+0x126>
 8005d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f043 0208 	orr.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 81ed 	beq.w	800617a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d008      	beq.n	8005dbe <HAL_UART_IRQHandler+0x14e>
 8005dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fb1a 	bl	80063f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <HAL_UART_IRQHandler+0x17a>
 8005de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d04f      	beq.n	8005e8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa22 	bl	8006234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfa:	2b40      	cmp	r3, #64	; 0x40
 8005dfc:	d141      	bne.n	8005e82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3314      	adds	r3, #20
 8005e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3314      	adds	r3, #20
 8005e26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1d9      	bne.n	8005dfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d013      	beq.n	8005e7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	4a7d      	ldr	r2, [pc, #500]	; (800604c <HAL_UART_IRQHandler+0x3dc>)
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fb ffb6 	bl	8001dd0 <HAL_DMA_Abort_IT>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e78:	e00e      	b.n	8005e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f986 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e80:	e00a      	b.n	8005e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f982 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	e006      	b.n	8005e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f97e 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e96:	e170      	b.n	800617a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e98:	bf00      	nop
    return;
 8005e9a:	e16e      	b.n	800617a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	f040 814a 	bne.w	800613a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8143 	beq.w	800613a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 813c 	beq.w	800613a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	f040 80b4 	bne.w	8006050 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ef4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8140 	beq.w	800617e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f06:	429a      	cmp	r2, r3
 8005f08:	f080 8139 	bcs.w	800617e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1e:	f000 8088 	beq.w	8006032 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1d9      	bne.n	8005f22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e1      	bne.n	8005f6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3314      	adds	r3, #20
 8005fb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3314      	adds	r3, #20
 8005fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e3      	bne.n	8005faa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006002:	f023 0310 	bic.w	r3, r3, #16
 8006006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006014:	65ba      	str	r2, [r7, #88]	; 0x58
 8006016:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800601a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e3      	bne.n	8005ff0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	4618      	mov	r0, r3
 800602e:	f7fb fe5f 	bl	8001cf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800603a:	b29b      	uxth	r3, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	b29b      	uxth	r3, r3
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f8ac 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006048:	e099      	b.n	800617e <HAL_UART_IRQHandler+0x50e>
 800604a:	bf00      	nop
 800604c:	080062fb 	.word	0x080062fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006058:	b29b      	uxth	r3, r3
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 808b 	beq.w	8006182 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800606c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8086 	beq.w	8006182 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800608c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800609a:	647a      	str	r2, [r7, #68]	; 0x44
 800609c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e3      	bne.n	8006076 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	623b      	str	r3, [r7, #32]
   return(result);
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060d2:	633a      	str	r2, [r7, #48]	; 0x30
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e3      	bne.n	80060ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	60fb      	str	r3, [r7, #12]
   return(result);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0310 	bic.w	r3, r3, #16
 800610a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006118:	61fa      	str	r2, [r7, #28]
 800611a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	69b9      	ldr	r1, [r7, #24]
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	617b      	str	r3, [r7, #20]
   return(result);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e3      	bne.n	80060f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800612c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f834 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006138:	e023      	b.n	8006182 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_UART_IRQHandler+0x4ea>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f8e5 	bl	8006322 <UART_Transmit_IT>
    return;
 8006158:	e014      	b.n	8006184 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00e      	beq.n	8006184 <HAL_UART_IRQHandler+0x514>
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f925 	bl	80063c2 <UART_EndTransmit_IT>
    return;
 8006178:	e004      	b.n	8006184 <HAL_UART_IRQHandler+0x514>
    return;
 800617a:	bf00      	nop
 800617c:	e002      	b.n	8006184 <HAL_UART_IRQHandler+0x514>
      return;
 800617e:	bf00      	nop
 8006180:	e000      	b.n	8006184 <HAL_UART_IRQHandler+0x514>
      return;
 8006182:	bf00      	nop
  }
}
 8006184:	37e8      	adds	r7, #232	; 0xe8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop

0800618c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	88fa      	ldrh	r2, [r7, #6]
 80061d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2222      	movs	r2, #34	; 0x22
 80061e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006204:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695a      	ldr	r2, [r3, #20]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0201 	orr.w	r2, r2, #1
 8006214:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0220 	orr.w	r2, r2, #32
 8006224:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b095      	sub	sp, #84	; 0x54
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	330c      	adds	r3, #12
 800625a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800625c:	643a      	str	r2, [r7, #64]	; 0x40
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e5      	bne.n	800623c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3314      	adds	r3, #20
 8006276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	64bb      	str	r3, [r7, #72]	; 0x48
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3314      	adds	r3, #20
 800628e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e5      	bne.n	8006270 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d119      	bne.n	80062e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f023 0310 	bic.w	r3, r3, #16
 80062c2:	647b      	str	r3, [r7, #68]	; 0x44
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062cc:	61ba      	str	r2, [r7, #24]
 80062ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6979      	ldr	r1, [r7, #20]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	613b      	str	r3, [r7, #16]
   return(result);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062ee:	bf00      	nop
 80062f0:	3754      	adds	r7, #84	; 0x54
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff ff39 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b21      	cmp	r3, #33	; 0x21
 8006334:	d13e      	bne.n	80063b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633e:	d114      	bne.n	800636a <UART_Transmit_IT+0x48>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d110      	bne.n	800636a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800635c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	1c9a      	adds	r2, r3, #2
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	621a      	str	r2, [r3, #32]
 8006368:	e008      	b.n	800637c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	1c59      	adds	r1, r3, #1
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6211      	str	r1, [r2, #32]
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29b      	uxth	r3, r3
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4619      	mov	r1, r3
 800638a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10f      	bne.n	80063b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800639e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	e000      	b.n	80063b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063b4:	2302      	movs	r3, #2
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fa fef8 	bl	80011d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b08c      	sub	sp, #48	; 0x30
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b22      	cmp	r3, #34	; 0x22
 8006404:	f040 80ab 	bne.w	800655e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006410:	d117      	bne.n	8006442 <UART_Receive_IT+0x50>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d113      	bne.n	8006442 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006430:	b29a      	uxth	r2, r3
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	1c9a      	adds	r2, r3, #2
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28
 8006440:	e026      	b.n	8006490 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006454:	d007      	beq.n	8006466 <UART_Receive_IT+0x74>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <UART_Receive_IT+0x82>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	e008      	b.n	8006486 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006480:	b2da      	uxtb	r2, r3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b29b      	uxth	r3, r3
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4619      	mov	r1, r3
 800649e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d15a      	bne.n	800655a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0220 	bic.w	r2, r2, #32
 80064b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0201 	bic.w	r2, r2, #1
 80064d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d135      	bne.n	8006550 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	613b      	str	r3, [r7, #16]
   return(result);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f023 0310 	bic.w	r3, r3, #16
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	623a      	str	r2, [r7, #32]
 800650c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	69f9      	ldr	r1, [r7, #28]
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	61bb      	str	r3, [r7, #24]
   return(result);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e5      	bne.n	80064ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b10      	cmp	r3, #16
 800652a:	d10a      	bne.n	8006542 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe29 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
 800654e:	e002      	b.n	8006556 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fa fdff 	bl	8001154 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e002      	b.n	8006560 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e000      	b.n	8006560 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800655e:	2302      	movs	r3, #2
  }
}
 8006560:	4618      	mov	r0, r3
 8006562:	3730      	adds	r7, #48	; 0x30
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800656c:	b0c0      	sub	sp, #256	; 0x100
 800656e:	af00      	add	r7, sp, #0
 8006570:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006584:	68d9      	ldr	r1, [r3, #12]
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	ea40 0301 	orr.w	r3, r0, r1
 8006590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	431a      	orrs	r2, r3
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065c0:	f021 010c 	bic.w	r1, r1, #12
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065ce:	430b      	orrs	r3, r1
 80065d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e2:	6999      	ldr	r1, [r3, #24]
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	ea40 0301 	orr.w	r3, r0, r1
 80065ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b8f      	ldr	r3, [pc, #572]	; (8006834 <UART_SetConfig+0x2cc>)
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d005      	beq.n	8006608 <UART_SetConfig+0xa0>
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b8d      	ldr	r3, [pc, #564]	; (8006838 <UART_SetConfig+0x2d0>)
 8006604:	429a      	cmp	r2, r3
 8006606:	d104      	bne.n	8006612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006608:	f7fe fb2c 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 800660c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006610:	e003      	b.n	800661a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006612:	f7fe fb13 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 8006616:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006624:	f040 810c 	bne.w	8006840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662c:	2200      	movs	r2, #0
 800662e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006632:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800663a:	4622      	mov	r2, r4
 800663c:	462b      	mov	r3, r5
 800663e:	1891      	adds	r1, r2, r2
 8006640:	65b9      	str	r1, [r7, #88]	; 0x58
 8006642:	415b      	adcs	r3, r3
 8006644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800664a:	4621      	mov	r1, r4
 800664c:	eb12 0801 	adds.w	r8, r2, r1
 8006650:	4629      	mov	r1, r5
 8006652:	eb43 0901 	adc.w	r9, r3, r1
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800666a:	4690      	mov	r8, r2
 800666c:	4699      	mov	r9, r3
 800666e:	4623      	mov	r3, r4
 8006670:	eb18 0303 	adds.w	r3, r8, r3
 8006674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006678:	462b      	mov	r3, r5
 800667a:	eb49 0303 	adc.w	r3, r9, r3
 800667e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800668e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006696:	460b      	mov	r3, r1
 8006698:	18db      	adds	r3, r3, r3
 800669a:	653b      	str	r3, [r7, #80]	; 0x50
 800669c:	4613      	mov	r3, r2
 800669e:	eb42 0303 	adc.w	r3, r2, r3
 80066a2:	657b      	str	r3, [r7, #84]	; 0x54
 80066a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066ac:	f7f9 fdf8 	bl	80002a0 <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4b61      	ldr	r3, [pc, #388]	; (800683c <UART_SetConfig+0x2d4>)
 80066b6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	011c      	lsls	r4, r3, #4
 80066be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	1891      	adds	r1, r2, r2
 80066d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80066d8:	415b      	adcs	r3, r3
 80066da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066e0:	4641      	mov	r1, r8
 80066e2:	eb12 0a01 	adds.w	sl, r2, r1
 80066e6:	4649      	mov	r1, r9
 80066e8:	eb43 0b01 	adc.w	fp, r3, r1
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006700:	4692      	mov	sl, r2
 8006702:	469b      	mov	fp, r3
 8006704:	4643      	mov	r3, r8
 8006706:	eb1a 0303 	adds.w	r3, sl, r3
 800670a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800670e:	464b      	mov	r3, r9
 8006710:	eb4b 0303 	adc.w	r3, fp, r3
 8006714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006724:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800672c:	460b      	mov	r3, r1
 800672e:	18db      	adds	r3, r3, r3
 8006730:	643b      	str	r3, [r7, #64]	; 0x40
 8006732:	4613      	mov	r3, r2
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	647b      	str	r3, [r7, #68]	; 0x44
 800673a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800673e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006742:	f7f9 fdad 	bl	80002a0 <__aeabi_uldivmod>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4611      	mov	r1, r2
 800674c:	4b3b      	ldr	r3, [pc, #236]	; (800683c <UART_SetConfig+0x2d4>)
 800674e:	fba3 2301 	umull	r2, r3, r3, r1
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	2264      	movs	r2, #100	; 0x64
 8006756:	fb02 f303 	mul.w	r3, r2, r3
 800675a:	1acb      	subs	r3, r1, r3
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006762:	4b36      	ldr	r3, [pc, #216]	; (800683c <UART_SetConfig+0x2d4>)
 8006764:	fba3 2302 	umull	r2, r3, r3, r2
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006770:	441c      	add	r4, r3
 8006772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006776:	2200      	movs	r2, #0
 8006778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800677c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	1891      	adds	r1, r2, r2
 800678a:	63b9      	str	r1, [r7, #56]	; 0x38
 800678c:	415b      	adcs	r3, r3
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006794:	4641      	mov	r1, r8
 8006796:	1851      	adds	r1, r2, r1
 8006798:	6339      	str	r1, [r7, #48]	; 0x30
 800679a:	4649      	mov	r1, r9
 800679c:	414b      	adcs	r3, r1
 800679e:	637b      	str	r3, [r7, #52]	; 0x34
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067ac:	4659      	mov	r1, fp
 80067ae:	00cb      	lsls	r3, r1, #3
 80067b0:	4651      	mov	r1, sl
 80067b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b6:	4651      	mov	r1, sl
 80067b8:	00ca      	lsls	r2, r1, #3
 80067ba:	4610      	mov	r0, r2
 80067bc:	4619      	mov	r1, r3
 80067be:	4603      	mov	r3, r0
 80067c0:	4642      	mov	r2, r8
 80067c2:	189b      	adds	r3, r3, r2
 80067c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c8:	464b      	mov	r3, r9
 80067ca:	460a      	mov	r2, r1
 80067cc:	eb42 0303 	adc.w	r3, r2, r3
 80067d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067e8:	460b      	mov	r3, r1
 80067ea:	18db      	adds	r3, r3, r3
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ee:	4613      	mov	r3, r2
 80067f0:	eb42 0303 	adc.w	r3, r2, r3
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067fe:	f7f9 fd4f 	bl	80002a0 <__aeabi_uldivmod>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <UART_SetConfig+0x2d4>)
 8006808:	fba3 1302 	umull	r1, r3, r3, r2
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	2164      	movs	r1, #100	; 0x64
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	3332      	adds	r3, #50	; 0x32
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <UART_SetConfig+0x2d4>)
 800681c:	fba2 2303 	umull	r2, r3, r2, r3
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f003 0207 	and.w	r2, r3, #7
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4422      	add	r2, r4
 800682e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006830:	e105      	b.n	8006a3e <UART_SetConfig+0x4d6>
 8006832:	bf00      	nop
 8006834:	40011000 	.word	0x40011000
 8006838:	40011400 	.word	0x40011400
 800683c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006844:	2200      	movs	r2, #0
 8006846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800684a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800684e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006852:	4642      	mov	r2, r8
 8006854:	464b      	mov	r3, r9
 8006856:	1891      	adds	r1, r2, r2
 8006858:	6239      	str	r1, [r7, #32]
 800685a:	415b      	adcs	r3, r3
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
 800685e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006862:	4641      	mov	r1, r8
 8006864:	1854      	adds	r4, r2, r1
 8006866:	4649      	mov	r1, r9
 8006868:	eb43 0501 	adc.w	r5, r3, r1
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	00eb      	lsls	r3, r5, #3
 8006876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800687a:	00e2      	lsls	r2, r4, #3
 800687c:	4614      	mov	r4, r2
 800687e:	461d      	mov	r5, r3
 8006880:	4643      	mov	r3, r8
 8006882:	18e3      	adds	r3, r4, r3
 8006884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006888:	464b      	mov	r3, r9
 800688a:	eb45 0303 	adc.w	r3, r5, r3
 800688e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800689e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068ae:	4629      	mov	r1, r5
 80068b0:	008b      	lsls	r3, r1, #2
 80068b2:	4621      	mov	r1, r4
 80068b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b8:	4621      	mov	r1, r4
 80068ba:	008a      	lsls	r2, r1, #2
 80068bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068c0:	f7f9 fcee 	bl	80002a0 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4b60      	ldr	r3, [pc, #384]	; (8006a4c <UART_SetConfig+0x4e4>)
 80068ca:	fba3 2302 	umull	r2, r3, r3, r2
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	011c      	lsls	r4, r3, #4
 80068d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068e4:	4642      	mov	r2, r8
 80068e6:	464b      	mov	r3, r9
 80068e8:	1891      	adds	r1, r2, r2
 80068ea:	61b9      	str	r1, [r7, #24]
 80068ec:	415b      	adcs	r3, r3
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068f4:	4641      	mov	r1, r8
 80068f6:	1851      	adds	r1, r2, r1
 80068f8:	6139      	str	r1, [r7, #16]
 80068fa:	4649      	mov	r1, r9
 80068fc:	414b      	adcs	r3, r1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800690c:	4659      	mov	r1, fp
 800690e:	00cb      	lsls	r3, r1, #3
 8006910:	4651      	mov	r1, sl
 8006912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006916:	4651      	mov	r1, sl
 8006918:	00ca      	lsls	r2, r1, #3
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	4603      	mov	r3, r0
 8006920:	4642      	mov	r2, r8
 8006922:	189b      	adds	r3, r3, r2
 8006924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006928:	464b      	mov	r3, r9
 800692a:	460a      	mov	r2, r1
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	67bb      	str	r3, [r7, #120]	; 0x78
 800693e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800694c:	4649      	mov	r1, r9
 800694e:	008b      	lsls	r3, r1, #2
 8006950:	4641      	mov	r1, r8
 8006952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006956:	4641      	mov	r1, r8
 8006958:	008a      	lsls	r2, r1, #2
 800695a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800695e:	f7f9 fc9f 	bl	80002a0 <__aeabi_uldivmod>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4b39      	ldr	r3, [pc, #228]	; (8006a4c <UART_SetConfig+0x4e4>)
 8006968:	fba3 1302 	umull	r1, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	2164      	movs	r1, #100	; 0x64
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	3332      	adds	r3, #50	; 0x32
 800697a:	4a34      	ldr	r2, [pc, #208]	; (8006a4c <UART_SetConfig+0x4e4>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006986:	441c      	add	r4, r3
 8006988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800698c:	2200      	movs	r2, #0
 800698e:	673b      	str	r3, [r7, #112]	; 0x70
 8006990:	677a      	str	r2, [r7, #116]	; 0x74
 8006992:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006996:	4642      	mov	r2, r8
 8006998:	464b      	mov	r3, r9
 800699a:	1891      	adds	r1, r2, r2
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	415b      	adcs	r3, r3
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a6:	4641      	mov	r1, r8
 80069a8:	1851      	adds	r1, r2, r1
 80069aa:	6039      	str	r1, [r7, #0]
 80069ac:	4649      	mov	r1, r9
 80069ae:	414b      	adcs	r3, r1
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069be:	4659      	mov	r1, fp
 80069c0:	00cb      	lsls	r3, r1, #3
 80069c2:	4651      	mov	r1, sl
 80069c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c8:	4651      	mov	r1, sl
 80069ca:	00ca      	lsls	r2, r1, #3
 80069cc:	4610      	mov	r0, r2
 80069ce:	4619      	mov	r1, r3
 80069d0:	4603      	mov	r3, r0
 80069d2:	4642      	mov	r2, r8
 80069d4:	189b      	adds	r3, r3, r2
 80069d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d8:	464b      	mov	r3, r9
 80069da:	460a      	mov	r2, r1
 80069dc:	eb42 0303 	adc.w	r3, r2, r3
 80069e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	663b      	str	r3, [r7, #96]	; 0x60
 80069ec:	667a      	str	r2, [r7, #100]	; 0x64
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069fa:	4649      	mov	r1, r9
 80069fc:	008b      	lsls	r3, r1, #2
 80069fe:	4641      	mov	r1, r8
 8006a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a04:	4641      	mov	r1, r8
 8006a06:	008a      	lsls	r2, r1, #2
 8006a08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a0c:	f7f9 fc48 	bl	80002a0 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <UART_SetConfig+0x4e4>)
 8006a16:	fba3 1302 	umull	r1, r3, r3, r2
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	2164      	movs	r1, #100	; 0x64
 8006a1e:	fb01 f303 	mul.w	r3, r1, r3
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	3332      	adds	r3, #50	; 0x32
 8006a28:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <UART_SetConfig+0x4e4>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	f003 020f 	and.w	r2, r3, #15
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4422      	add	r2, r4
 8006a3c:	609a      	str	r2, [r3, #8]
}
 8006a3e:	bf00      	nop
 8006a40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a44:	46bd      	mov	sp, r7
 8006a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a4a:	bf00      	nop
 8006a4c:	51eb851f 	.word	0x51eb851f

08006a50 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d123      	bne.n	8006aaa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	6851      	ldr	r1, [r2, #4]
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	6892      	ldr	r2, [r2, #8]
 8006a76:	4311      	orrs	r1, r2
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	68d2      	ldr	r2, [r2, #12]
 8006a7c:	4311      	orrs	r1, r2
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	6912      	ldr	r2, [r2, #16]
 8006a82:	4311      	orrs	r1, r2
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	6952      	ldr	r2, [r2, #20]
 8006a88:	4311      	orrs	r1, r2
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	6992      	ldr	r2, [r2, #24]
 8006a8e:	4311      	orrs	r1, r2
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	69d2      	ldr	r2, [r2, #28]
 8006a94:	4311      	orrs	r1, r2
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	6a12      	ldr	r2, [r2, #32]
 8006a9a:	4311      	orrs	r1, r2
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e028      	b.n	8006afc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	69d9      	ldr	r1, [r3, #28]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	4319      	orrs	r1, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006ad0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	6851      	ldr	r1, [r2, #4]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	6892      	ldr	r2, [r2, #8]
 8006adc:	4311      	orrs	r1, r2
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	68d2      	ldr	r2, [r2, #12]
 8006ae2:	4311      	orrs	r1, r2
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	6912      	ldr	r2, [r2, #16]
 8006ae8:	4311      	orrs	r1, r2
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	6952      	ldr	r2, [r2, #20]
 8006aee:	4311      	orrs	r1, r2
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	6992      	ldr	r2, [r2, #24]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d128      	bne.n	8006b6e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	1e59      	subs	r1, r3, #1
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	4319      	orrs	r1, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	4319      	orrs	r1, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	031b      	lsls	r3, r3, #12
 8006b46:	4319      	orrs	r1, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	4319      	orrs	r1, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	051b      	lsls	r3, r3, #20
 8006b5a:	4319      	orrs	r1, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	061b      	lsls	r3, r3, #24
 8006b64:	430b      	orrs	r3, r1
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	609a      	str	r2, [r3, #8]
 8006b6c:	e02f      	b.n	8006bce <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	68d2      	ldr	r2, [r2, #12]
 8006b7e:	3a01      	subs	r2, #1
 8006b80:	0311      	lsls	r1, r2, #12
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	6952      	ldr	r2, [r2, #20]
 8006b86:	3a01      	subs	r2, #1
 8006b88:	0512      	lsls	r2, r2, #20
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	1e59      	subs	r1, r3, #1
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	4319      	orrs	r1, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	4319      	orrs	r1, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	4319      	orrs	r1, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	061b      	lsls	r3, r3, #24
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bdc:	b084      	sub	sp, #16
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	f107 001c 	add.w	r0, r7, #28
 8006bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d122      	bne.n	8006c3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f970 	bl	8006f14 <USB_CoreReset>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]
 8006c38:	e01a      	b.n	8006c70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f964 	bl	8006f14 <USB_CoreReset>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
 8006c62:	e005      	b.n	8006c70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d10b      	bne.n	8006c8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f043 0206 	orr.w	r2, r3, #6
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f043 0220 	orr.w	r2, r3, #32
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c9a:	b004      	add	sp, #16
 8006c9c:	4770      	bx	lr

08006c9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 0201 	bic.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d115      	bne.n	8006d0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f7fa fedc 	bl	8001aac <HAL_Delay>
      ms++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8fb 	bl	8006ef6 <USB_GetMode>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d01e      	beq.n	8006d44 <USB_SetCurrentMode+0x84>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b31      	cmp	r3, #49	; 0x31
 8006d0a:	d9f0      	bls.n	8006cee <USB_SetCurrentMode+0x2e>
 8006d0c:	e01a      	b.n	8006d44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d115      	bne.n	8006d40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d20:	2001      	movs	r0, #1
 8006d22:	f7fa fec3 	bl	8001aac <HAL_Delay>
      ms++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f8e2 	bl	8006ef6 <USB_GetMode>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <USB_SetCurrentMode+0x84>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b31      	cmp	r3, #49	; 0x31
 8006d3c:	d9f0      	bls.n	8006d20 <USB_SetCurrentMode+0x60>
 8006d3e:	e001      	b.n	8006d44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e005      	b.n	8006d50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b32      	cmp	r3, #50	; 0x32
 8006d48:	d101      	bne.n	8006d4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <USB_FlushTxFifo+0x64>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e01b      	b.n	8006db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	daf2      	bge.n	8006d66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	019b      	lsls	r3, r3, #6
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a08      	ldr	r2, [pc, #32]	; (8006dbc <USB_FlushTxFifo+0x64>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e006      	b.n	8006db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d0f0      	beq.n	8006d90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	00030d40 	.word	0x00030d40

08006dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <USB_FlushRxFifo+0x5c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e018      	b.n	8006e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	daf2      	bge.n	8006dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2210      	movs	r2, #16
 8006dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <USB_FlushRxFifo+0x5c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e006      	b.n	8006e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d0f0      	beq.n	8006df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	00030d40 	.word	0x00030d40

08006e20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b08b      	sub	sp, #44	; 0x2c
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	089b      	lsrs	r3, r3, #2
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e46:	2300      	movs	r3, #0
 8006e48:	623b      	str	r3, [r7, #32]
 8006e4a:	e014      	b.n	8006e76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	3301      	adds	r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	3301      	adds	r3, #1
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	3301      	adds	r3, #1
 8006e74:	623b      	str	r3, [r7, #32]
 8006e76:	6a3a      	ldr	r2, [r7, #32]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d3e6      	bcc.n	8006e4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e7e:	8bfb      	ldrh	r3, [r7, #30]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01e      	beq.n	8006ec2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	6812      	ldr	r2, [r2, #0]
 8006e96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	701a      	strb	r2, [r3, #0]
      i++;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	3301      	adds	r3, #1
 8006eae:	623b      	str	r3, [r7, #32]
      pDest++;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006eb6:	8bfb      	ldrh	r3, [r7, #30]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ebc:	8bfb      	ldrh	r3, [r7, #30]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1ea      	bne.n	8006e98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	372c      	adds	r7, #44	; 0x2c
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	f003 0301 	and.w	r3, r3, #1
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4a13      	ldr	r2, [pc, #76]	; (8006f78 <USB_CoreReset+0x64>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e01b      	b.n	8006f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	daf2      	bge.n	8006f20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f043 0201 	orr.w	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <USB_CoreReset+0x64>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e006      	b.n	8006f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d0f0      	beq.n	8006f4a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	00030d40 	.word	0x00030d40

08006f7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d018      	beq.n	8007004 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d10a      	bne.n	8006fee <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fe6:	f043 0304 	orr.w	r3, r3, #4
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e014      	b.n	8007018 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ffc:	f023 0304 	bic.w	r3, r3, #4
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	e009      	b.n	8007018 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007012:	f023 0304 	bic.w	r3, r3, #4
 8007016:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007018:	2110      	movs	r1, #16
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff fe9c 	bl	8006d58 <USB_FlushTxFifo>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fec8 	bl	8006dc0 <USB_FlushRxFifo>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e015      	b.n	800706c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704c:	461a      	mov	r2, r3
 800704e:	f04f 33ff 	mov.w	r3, #4294967295
 8007052:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007060:	461a      	mov	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3301      	adds	r3, #1
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d3e5      	bcc.n	8007040 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f04f 32ff 	mov.w	r2, #4294967295
 8007080:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00b      	beq.n	80070a6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007094:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a13      	ldr	r2, [pc, #76]	; (80070e8 <USB_HostInit+0x16c>)
 800709a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a13      	ldr	r2, [pc, #76]	; (80070ec <USB_HostInit+0x170>)
 80070a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80070a4:	e009      	b.n	80070ba <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2280      	movs	r2, #128	; 0x80
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <USB_HostInit+0x174>)
 80070b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a0f      	ldr	r2, [pc, #60]	; (80070f4 <USB_HostInit+0x178>)
 80070b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d105      	bne.n	80070cc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f043 0210 	orr.w	r2, r3, #16
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <USB_HostInit+0x17c>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070e4:	b004      	add	sp, #16
 80070e6:	4770      	bx	lr
 80070e8:	01000200 	.word	0x01000200
 80070ec:	00e00300 	.word	0x00e00300
 80070f0:	00600080 	.word	0x00600080
 80070f4:	004000e0 	.word	0x004000e0
 80070f8:	a3200008 	.word	0xa3200008

080070fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007134:	4313      	orrs	r3, r2
 8007136:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d107      	bne.n	800714e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007144:	461a      	mov	r2, r3
 8007146:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800714a:	6053      	str	r3, [r2, #4]
 800714c:	e009      	b.n	8007162 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d106      	bne.n	8007162 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800715a:	461a      	mov	r2, r3
 800715c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007160:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	b29b      	uxth	r3, r3
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007192:	b480      	push	{r7}
 8007194:	b089      	sub	sp, #36	; 0x24
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	0c9b      	lsrs	r3, r3, #18
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	0fdb      	lsrs	r3, r3, #31
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d104      	bne.n	80071ec <USB_HC_Halt+0x5a>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e0c8      	b.n	800737e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <USB_HC_Halt+0x66>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d163      	bne.n	80072c0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007216:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 80ab 	bne.w	800737c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d133      	bne.n	800729a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	440a      	add	r2, r1
 8007248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007250:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	440a      	add	r2, r1
 8007268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800726c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007270:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800727e:	d81d      	bhi.n	80072bc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007296:	d0ec      	beq.n	8007272 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007298:	e070      	b.n	800737c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072ba:	e05f      	b.n	800737c <USB_HC_Halt+0x1ea>
            break;
 80072bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072be:	e05d      	b.n	800737c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d133      	bne.n	8007358 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800730a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800730e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	440a      	add	r2, r1
 8007326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800732a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800732e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800733c:	d81d      	bhi.n	800737a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007354:	d0ec      	beq.n	8007330 <USB_HC_Halt+0x19e>
 8007356:	e011      	b.n	800737c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	440a      	add	r2, r1
 800736e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	e000      	b.n	800737c <USB_HC_Halt+0x1ea>
          break;
 800737a:	bf00      	nop
    }
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3724      	adds	r7, #36	; 0x24
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <__errno>:
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <__errno+0x8>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	2000000c 	.word	0x2000000c

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4d0d      	ldr	r5, [pc, #52]	; (80073d0 <__libc_init_array+0x38>)
 800739c:	4c0d      	ldr	r4, [pc, #52]	; (80073d4 <__libc_init_array+0x3c>)
 800739e:	1b64      	subs	r4, r4, r5
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	2600      	movs	r6, #0
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	4d0b      	ldr	r5, [pc, #44]	; (80073d8 <__libc_init_array+0x40>)
 80073aa:	4c0c      	ldr	r4, [pc, #48]	; (80073dc <__libc_init_array+0x44>)
 80073ac:	f000 fc8e 	bl	8007ccc <_init>
 80073b0:	1b64      	subs	r4, r4, r5
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	2600      	movs	r6, #0
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c0:	4798      	blx	r3
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ca:	4798      	blx	r3
 80073cc:	3601      	adds	r6, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	08007d60 	.word	0x08007d60
 80073d4:	08007d60 	.word	0x08007d60
 80073d8:	08007d60 	.word	0x08007d60
 80073dc:	08007d64 	.word	0x08007d64

080073e0 <memset>:
 80073e0:	4402      	add	r2, r0
 80073e2:	4603      	mov	r3, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <siprintf>:
 80073f0:	b40e      	push	{r1, r2, r3}
 80073f2:	b500      	push	{lr}
 80073f4:	b09c      	sub	sp, #112	; 0x70
 80073f6:	ab1d      	add	r3, sp, #116	; 0x74
 80073f8:	9002      	str	r0, [sp, #8]
 80073fa:	9006      	str	r0, [sp, #24]
 80073fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007400:	4809      	ldr	r0, [pc, #36]	; (8007428 <siprintf+0x38>)
 8007402:	9107      	str	r1, [sp, #28]
 8007404:	9104      	str	r1, [sp, #16]
 8007406:	4909      	ldr	r1, [pc, #36]	; (800742c <siprintf+0x3c>)
 8007408:	f853 2b04 	ldr.w	r2, [r3], #4
 800740c:	9105      	str	r1, [sp, #20]
 800740e:	6800      	ldr	r0, [r0, #0]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	a902      	add	r1, sp, #8
 8007414:	f000 f868 	bl	80074e8 <_svfiprintf_r>
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	b01c      	add	sp, #112	; 0x70
 8007420:	f85d eb04 	ldr.w	lr, [sp], #4
 8007424:	b003      	add	sp, #12
 8007426:	4770      	bx	lr
 8007428:	2000000c 	.word	0x2000000c
 800742c:	ffff0208 	.word	0xffff0208

08007430 <__ssputs_r>:
 8007430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007434:	688e      	ldr	r6, [r1, #8]
 8007436:	429e      	cmp	r6, r3
 8007438:	4682      	mov	sl, r0
 800743a:	460c      	mov	r4, r1
 800743c:	4690      	mov	r8, r2
 800743e:	461f      	mov	r7, r3
 8007440:	d838      	bhi.n	80074b4 <__ssputs_r+0x84>
 8007442:	898a      	ldrh	r2, [r1, #12]
 8007444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007448:	d032      	beq.n	80074b0 <__ssputs_r+0x80>
 800744a:	6825      	ldr	r5, [r4, #0]
 800744c:	6909      	ldr	r1, [r1, #16]
 800744e:	eba5 0901 	sub.w	r9, r5, r1
 8007452:	6965      	ldr	r5, [r4, #20]
 8007454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800745c:	3301      	adds	r3, #1
 800745e:	444b      	add	r3, r9
 8007460:	106d      	asrs	r5, r5, #1
 8007462:	429d      	cmp	r5, r3
 8007464:	bf38      	it	cc
 8007466:	461d      	movcc	r5, r3
 8007468:	0553      	lsls	r3, r2, #21
 800746a:	d531      	bpl.n	80074d0 <__ssputs_r+0xa0>
 800746c:	4629      	mov	r1, r5
 800746e:	f000 fb63 	bl	8007b38 <_malloc_r>
 8007472:	4606      	mov	r6, r0
 8007474:	b950      	cbnz	r0, 800748c <__ssputs_r+0x5c>
 8007476:	230c      	movs	r3, #12
 8007478:	f8ca 3000 	str.w	r3, [sl]
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748c:	6921      	ldr	r1, [r4, #16]
 800748e:	464a      	mov	r2, r9
 8007490:	f000 fabe 	bl	8007a10 <memcpy>
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749e:	81a3      	strh	r3, [r4, #12]
 80074a0:	6126      	str	r6, [r4, #16]
 80074a2:	6165      	str	r5, [r4, #20]
 80074a4:	444e      	add	r6, r9
 80074a6:	eba5 0509 	sub.w	r5, r5, r9
 80074aa:	6026      	str	r6, [r4, #0]
 80074ac:	60a5      	str	r5, [r4, #8]
 80074ae:	463e      	mov	r6, r7
 80074b0:	42be      	cmp	r6, r7
 80074b2:	d900      	bls.n	80074b6 <__ssputs_r+0x86>
 80074b4:	463e      	mov	r6, r7
 80074b6:	6820      	ldr	r0, [r4, #0]
 80074b8:	4632      	mov	r2, r6
 80074ba:	4641      	mov	r1, r8
 80074bc:	f000 fab6 	bl	8007a2c <memmove>
 80074c0:	68a3      	ldr	r3, [r4, #8]
 80074c2:	1b9b      	subs	r3, r3, r6
 80074c4:	60a3      	str	r3, [r4, #8]
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	4433      	add	r3, r6
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	2000      	movs	r0, #0
 80074ce:	e7db      	b.n	8007488 <__ssputs_r+0x58>
 80074d0:	462a      	mov	r2, r5
 80074d2:	f000 fba5 	bl	8007c20 <_realloc_r>
 80074d6:	4606      	mov	r6, r0
 80074d8:	2800      	cmp	r0, #0
 80074da:	d1e1      	bne.n	80074a0 <__ssputs_r+0x70>
 80074dc:	6921      	ldr	r1, [r4, #16]
 80074de:	4650      	mov	r0, sl
 80074e0:	f000 fabe 	bl	8007a60 <_free_r>
 80074e4:	e7c7      	b.n	8007476 <__ssputs_r+0x46>
	...

080074e8 <_svfiprintf_r>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	4698      	mov	r8, r3
 80074ee:	898b      	ldrh	r3, [r1, #12]
 80074f0:	061b      	lsls	r3, r3, #24
 80074f2:	b09d      	sub	sp, #116	; 0x74
 80074f4:	4607      	mov	r7, r0
 80074f6:	460d      	mov	r5, r1
 80074f8:	4614      	mov	r4, r2
 80074fa:	d50e      	bpl.n	800751a <_svfiprintf_r+0x32>
 80074fc:	690b      	ldr	r3, [r1, #16]
 80074fe:	b963      	cbnz	r3, 800751a <_svfiprintf_r+0x32>
 8007500:	2140      	movs	r1, #64	; 0x40
 8007502:	f000 fb19 	bl	8007b38 <_malloc_r>
 8007506:	6028      	str	r0, [r5, #0]
 8007508:	6128      	str	r0, [r5, #16]
 800750a:	b920      	cbnz	r0, 8007516 <_svfiprintf_r+0x2e>
 800750c:	230c      	movs	r3, #12
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	e0d1      	b.n	80076ba <_svfiprintf_r+0x1d2>
 8007516:	2340      	movs	r3, #64	; 0x40
 8007518:	616b      	str	r3, [r5, #20]
 800751a:	2300      	movs	r3, #0
 800751c:	9309      	str	r3, [sp, #36]	; 0x24
 800751e:	2320      	movs	r3, #32
 8007520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007524:	f8cd 800c 	str.w	r8, [sp, #12]
 8007528:	2330      	movs	r3, #48	; 0x30
 800752a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076d4 <_svfiprintf_r+0x1ec>
 800752e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007532:	f04f 0901 	mov.w	r9, #1
 8007536:	4623      	mov	r3, r4
 8007538:	469a      	mov	sl, r3
 800753a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753e:	b10a      	cbz	r2, 8007544 <_svfiprintf_r+0x5c>
 8007540:	2a25      	cmp	r2, #37	; 0x25
 8007542:	d1f9      	bne.n	8007538 <_svfiprintf_r+0x50>
 8007544:	ebba 0b04 	subs.w	fp, sl, r4
 8007548:	d00b      	beq.n	8007562 <_svfiprintf_r+0x7a>
 800754a:	465b      	mov	r3, fp
 800754c:	4622      	mov	r2, r4
 800754e:	4629      	mov	r1, r5
 8007550:	4638      	mov	r0, r7
 8007552:	f7ff ff6d 	bl	8007430 <__ssputs_r>
 8007556:	3001      	adds	r0, #1
 8007558:	f000 80aa 	beq.w	80076b0 <_svfiprintf_r+0x1c8>
 800755c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800755e:	445a      	add	r2, fp
 8007560:	9209      	str	r2, [sp, #36]	; 0x24
 8007562:	f89a 3000 	ldrb.w	r3, [sl]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80a2 	beq.w	80076b0 <_svfiprintf_r+0x1c8>
 800756c:	2300      	movs	r3, #0
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007576:	f10a 0a01 	add.w	sl, sl, #1
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	9307      	str	r3, [sp, #28]
 800757e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007582:	931a      	str	r3, [sp, #104]	; 0x68
 8007584:	4654      	mov	r4, sl
 8007586:	2205      	movs	r2, #5
 8007588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758c:	4851      	ldr	r0, [pc, #324]	; (80076d4 <_svfiprintf_r+0x1ec>)
 800758e:	f7f8 fe37 	bl	8000200 <memchr>
 8007592:	9a04      	ldr	r2, [sp, #16]
 8007594:	b9d8      	cbnz	r0, 80075ce <_svfiprintf_r+0xe6>
 8007596:	06d0      	lsls	r0, r2, #27
 8007598:	bf44      	itt	mi
 800759a:	2320      	movmi	r3, #32
 800759c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a0:	0711      	lsls	r1, r2, #28
 80075a2:	bf44      	itt	mi
 80075a4:	232b      	movmi	r3, #43	; 0x2b
 80075a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075aa:	f89a 3000 	ldrb.w	r3, [sl]
 80075ae:	2b2a      	cmp	r3, #42	; 0x2a
 80075b0:	d015      	beq.n	80075de <_svfiprintf_r+0xf6>
 80075b2:	9a07      	ldr	r2, [sp, #28]
 80075b4:	4654      	mov	r4, sl
 80075b6:	2000      	movs	r0, #0
 80075b8:	f04f 0c0a 	mov.w	ip, #10
 80075bc:	4621      	mov	r1, r4
 80075be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075c2:	3b30      	subs	r3, #48	; 0x30
 80075c4:	2b09      	cmp	r3, #9
 80075c6:	d94e      	bls.n	8007666 <_svfiprintf_r+0x17e>
 80075c8:	b1b0      	cbz	r0, 80075f8 <_svfiprintf_r+0x110>
 80075ca:	9207      	str	r2, [sp, #28]
 80075cc:	e014      	b.n	80075f8 <_svfiprintf_r+0x110>
 80075ce:	eba0 0308 	sub.w	r3, r0, r8
 80075d2:	fa09 f303 	lsl.w	r3, r9, r3
 80075d6:	4313      	orrs	r3, r2
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	46a2      	mov	sl, r4
 80075dc:	e7d2      	b.n	8007584 <_svfiprintf_r+0x9c>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	1d19      	adds	r1, r3, #4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	9103      	str	r1, [sp, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bfbb      	ittet	lt
 80075ea:	425b      	neglt	r3, r3
 80075ec:	f042 0202 	orrlt.w	r2, r2, #2
 80075f0:	9307      	strge	r3, [sp, #28]
 80075f2:	9307      	strlt	r3, [sp, #28]
 80075f4:	bfb8      	it	lt
 80075f6:	9204      	strlt	r2, [sp, #16]
 80075f8:	7823      	ldrb	r3, [r4, #0]
 80075fa:	2b2e      	cmp	r3, #46	; 0x2e
 80075fc:	d10c      	bne.n	8007618 <_svfiprintf_r+0x130>
 80075fe:	7863      	ldrb	r3, [r4, #1]
 8007600:	2b2a      	cmp	r3, #42	; 0x2a
 8007602:	d135      	bne.n	8007670 <_svfiprintf_r+0x188>
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	1d1a      	adds	r2, r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	9203      	str	r2, [sp, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	bfb8      	it	lt
 8007610:	f04f 33ff 	movlt.w	r3, #4294967295
 8007614:	3402      	adds	r4, #2
 8007616:	9305      	str	r3, [sp, #20]
 8007618:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076e4 <_svfiprintf_r+0x1fc>
 800761c:	7821      	ldrb	r1, [r4, #0]
 800761e:	2203      	movs	r2, #3
 8007620:	4650      	mov	r0, sl
 8007622:	f7f8 fded 	bl	8000200 <memchr>
 8007626:	b140      	cbz	r0, 800763a <_svfiprintf_r+0x152>
 8007628:	2340      	movs	r3, #64	; 0x40
 800762a:	eba0 000a 	sub.w	r0, r0, sl
 800762e:	fa03 f000 	lsl.w	r0, r3, r0
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	4303      	orrs	r3, r0
 8007636:	3401      	adds	r4, #1
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763e:	4826      	ldr	r0, [pc, #152]	; (80076d8 <_svfiprintf_r+0x1f0>)
 8007640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007644:	2206      	movs	r2, #6
 8007646:	f7f8 fddb 	bl	8000200 <memchr>
 800764a:	2800      	cmp	r0, #0
 800764c:	d038      	beq.n	80076c0 <_svfiprintf_r+0x1d8>
 800764e:	4b23      	ldr	r3, [pc, #140]	; (80076dc <_svfiprintf_r+0x1f4>)
 8007650:	bb1b      	cbnz	r3, 800769a <_svfiprintf_r+0x1b2>
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	3307      	adds	r3, #7
 8007656:	f023 0307 	bic.w	r3, r3, #7
 800765a:	3308      	adds	r3, #8
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	4433      	add	r3, r6
 8007662:	9309      	str	r3, [sp, #36]	; 0x24
 8007664:	e767      	b.n	8007536 <_svfiprintf_r+0x4e>
 8007666:	fb0c 3202 	mla	r2, ip, r2, r3
 800766a:	460c      	mov	r4, r1
 800766c:	2001      	movs	r0, #1
 800766e:	e7a5      	b.n	80075bc <_svfiprintf_r+0xd4>
 8007670:	2300      	movs	r3, #0
 8007672:	3401      	adds	r4, #1
 8007674:	9305      	str	r3, [sp, #20]
 8007676:	4619      	mov	r1, r3
 8007678:	f04f 0c0a 	mov.w	ip, #10
 800767c:	4620      	mov	r0, r4
 800767e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007682:	3a30      	subs	r2, #48	; 0x30
 8007684:	2a09      	cmp	r2, #9
 8007686:	d903      	bls.n	8007690 <_svfiprintf_r+0x1a8>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0c5      	beq.n	8007618 <_svfiprintf_r+0x130>
 800768c:	9105      	str	r1, [sp, #20]
 800768e:	e7c3      	b.n	8007618 <_svfiprintf_r+0x130>
 8007690:	fb0c 2101 	mla	r1, ip, r1, r2
 8007694:	4604      	mov	r4, r0
 8007696:	2301      	movs	r3, #1
 8007698:	e7f0      	b.n	800767c <_svfiprintf_r+0x194>
 800769a:	ab03      	add	r3, sp, #12
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	462a      	mov	r2, r5
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <_svfiprintf_r+0x1f8>)
 80076a2:	a904      	add	r1, sp, #16
 80076a4:	4638      	mov	r0, r7
 80076a6:	f3af 8000 	nop.w
 80076aa:	1c42      	adds	r2, r0, #1
 80076ac:	4606      	mov	r6, r0
 80076ae:	d1d6      	bne.n	800765e <_svfiprintf_r+0x176>
 80076b0:	89ab      	ldrh	r3, [r5, #12]
 80076b2:	065b      	lsls	r3, r3, #25
 80076b4:	f53f af2c 	bmi.w	8007510 <_svfiprintf_r+0x28>
 80076b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ba:	b01d      	add	sp, #116	; 0x74
 80076bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c0:	ab03      	add	r3, sp, #12
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	462a      	mov	r2, r5
 80076c6:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <_svfiprintf_r+0x1f8>)
 80076c8:	a904      	add	r1, sp, #16
 80076ca:	4638      	mov	r0, r7
 80076cc:	f000 f87a 	bl	80077c4 <_printf_i>
 80076d0:	e7eb      	b.n	80076aa <_svfiprintf_r+0x1c2>
 80076d2:	bf00      	nop
 80076d4:	08007d24 	.word	0x08007d24
 80076d8:	08007d2e 	.word	0x08007d2e
 80076dc:	00000000 	.word	0x00000000
 80076e0:	08007431 	.word	0x08007431
 80076e4:	08007d2a 	.word	0x08007d2a

080076e8 <_printf_common>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	4616      	mov	r6, r2
 80076ee:	4699      	mov	r9, r3
 80076f0:	688a      	ldr	r2, [r1, #8]
 80076f2:	690b      	ldr	r3, [r1, #16]
 80076f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	bfb8      	it	lt
 80076fc:	4613      	movlt	r3, r2
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007704:	4607      	mov	r7, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b10a      	cbz	r2, 800770e <_printf_common+0x26>
 800770a:	3301      	adds	r3, #1
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	0699      	lsls	r1, r3, #26
 8007712:	bf42      	ittt	mi
 8007714:	6833      	ldrmi	r3, [r6, #0]
 8007716:	3302      	addmi	r3, #2
 8007718:	6033      	strmi	r3, [r6, #0]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	f015 0506 	ands.w	r5, r5, #6
 8007720:	d106      	bne.n	8007730 <_printf_common+0x48>
 8007722:	f104 0a19 	add.w	sl, r4, #25
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc26      	bgt.n	800777e <_printf_common+0x96>
 8007730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007734:	1e13      	subs	r3, r2, #0
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	bf18      	it	ne
 800773a:	2301      	movne	r3, #1
 800773c:	0692      	lsls	r2, r2, #26
 800773e:	d42b      	bmi.n	8007798 <_printf_common+0xb0>
 8007740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007744:	4649      	mov	r1, r9
 8007746:	4638      	mov	r0, r7
 8007748:	47c0      	blx	r8
 800774a:	3001      	adds	r0, #1
 800774c:	d01e      	beq.n	800778c <_printf_common+0xa4>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	68e5      	ldr	r5, [r4, #12]
 8007752:	6832      	ldr	r2, [r6, #0]
 8007754:	f003 0306 	and.w	r3, r3, #6
 8007758:	2b04      	cmp	r3, #4
 800775a:	bf08      	it	eq
 800775c:	1aad      	subeq	r5, r5, r2
 800775e:	68a3      	ldr	r3, [r4, #8]
 8007760:	6922      	ldr	r2, [r4, #16]
 8007762:	bf0c      	ite	eq
 8007764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007768:	2500      	movne	r5, #0
 800776a:	4293      	cmp	r3, r2
 800776c:	bfc4      	itt	gt
 800776e:	1a9b      	subgt	r3, r3, r2
 8007770:	18ed      	addgt	r5, r5, r3
 8007772:	2600      	movs	r6, #0
 8007774:	341a      	adds	r4, #26
 8007776:	42b5      	cmp	r5, r6
 8007778:	d11a      	bne.n	80077b0 <_printf_common+0xc8>
 800777a:	2000      	movs	r0, #0
 800777c:	e008      	b.n	8007790 <_printf_common+0xa8>
 800777e:	2301      	movs	r3, #1
 8007780:	4652      	mov	r2, sl
 8007782:	4649      	mov	r1, r9
 8007784:	4638      	mov	r0, r7
 8007786:	47c0      	blx	r8
 8007788:	3001      	adds	r0, #1
 800778a:	d103      	bne.n	8007794 <_printf_common+0xac>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007794:	3501      	adds	r5, #1
 8007796:	e7c6      	b.n	8007726 <_printf_common+0x3e>
 8007798:	18e1      	adds	r1, r4, r3
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	2030      	movs	r0, #48	; 0x30
 800779e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077a2:	4422      	add	r2, r4
 80077a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7c7      	b.n	8007740 <_printf_common+0x58>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4622      	mov	r2, r4
 80077b4:	4649      	mov	r1, r9
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c0      	blx	r8
 80077ba:	3001      	adds	r0, #1
 80077bc:	d0e6      	beq.n	800778c <_printf_common+0xa4>
 80077be:	3601      	adds	r6, #1
 80077c0:	e7d9      	b.n	8007776 <_printf_common+0x8e>
	...

080077c4 <_printf_i>:
 80077c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	7e0f      	ldrb	r7, [r1, #24]
 80077ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077cc:	2f78      	cmp	r7, #120	; 0x78
 80077ce:	4691      	mov	r9, r2
 80077d0:	4680      	mov	r8, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	469a      	mov	sl, r3
 80077d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077da:	d807      	bhi.n	80077ec <_printf_i+0x28>
 80077dc:	2f62      	cmp	r7, #98	; 0x62
 80077de:	d80a      	bhi.n	80077f6 <_printf_i+0x32>
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	f000 80d8 	beq.w	8007996 <_printf_i+0x1d2>
 80077e6:	2f58      	cmp	r7, #88	; 0x58
 80077e8:	f000 80a3 	beq.w	8007932 <_printf_i+0x16e>
 80077ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077f4:	e03a      	b.n	800786c <_printf_i+0xa8>
 80077f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077fa:	2b15      	cmp	r3, #21
 80077fc:	d8f6      	bhi.n	80077ec <_printf_i+0x28>
 80077fe:	a101      	add	r1, pc, #4	; (adr r1, 8007804 <_printf_i+0x40>)
 8007800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007804:	0800785d 	.word	0x0800785d
 8007808:	08007871 	.word	0x08007871
 800780c:	080077ed 	.word	0x080077ed
 8007810:	080077ed 	.word	0x080077ed
 8007814:	080077ed 	.word	0x080077ed
 8007818:	080077ed 	.word	0x080077ed
 800781c:	08007871 	.word	0x08007871
 8007820:	080077ed 	.word	0x080077ed
 8007824:	080077ed 	.word	0x080077ed
 8007828:	080077ed 	.word	0x080077ed
 800782c:	080077ed 	.word	0x080077ed
 8007830:	0800797d 	.word	0x0800797d
 8007834:	080078a1 	.word	0x080078a1
 8007838:	0800795f 	.word	0x0800795f
 800783c:	080077ed 	.word	0x080077ed
 8007840:	080077ed 	.word	0x080077ed
 8007844:	0800799f 	.word	0x0800799f
 8007848:	080077ed 	.word	0x080077ed
 800784c:	080078a1 	.word	0x080078a1
 8007850:	080077ed 	.word	0x080077ed
 8007854:	080077ed 	.word	0x080077ed
 8007858:	08007967 	.word	0x08007967
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	602a      	str	r2, [r5, #0]
 8007864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800786c:	2301      	movs	r3, #1
 800786e:	e0a3      	b.n	80079b8 <_printf_i+0x1f4>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	6829      	ldr	r1, [r5, #0]
 8007874:	0606      	lsls	r6, r0, #24
 8007876:	f101 0304 	add.w	r3, r1, #4
 800787a:	d50a      	bpl.n	8007892 <_printf_i+0xce>
 800787c:	680e      	ldr	r6, [r1, #0]
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	2e00      	cmp	r6, #0
 8007882:	da03      	bge.n	800788c <_printf_i+0xc8>
 8007884:	232d      	movs	r3, #45	; 0x2d
 8007886:	4276      	negs	r6, r6
 8007888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800788c:	485e      	ldr	r0, [pc, #376]	; (8007a08 <_printf_i+0x244>)
 800788e:	230a      	movs	r3, #10
 8007890:	e019      	b.n	80078c6 <_printf_i+0x102>
 8007892:	680e      	ldr	r6, [r1, #0]
 8007894:	602b      	str	r3, [r5, #0]
 8007896:	f010 0f40 	tst.w	r0, #64	; 0x40
 800789a:	bf18      	it	ne
 800789c:	b236      	sxthne	r6, r6
 800789e:	e7ef      	b.n	8007880 <_printf_i+0xbc>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	6820      	ldr	r0, [r4, #0]
 80078a4:	1d19      	adds	r1, r3, #4
 80078a6:	6029      	str	r1, [r5, #0]
 80078a8:	0601      	lsls	r1, r0, #24
 80078aa:	d501      	bpl.n	80078b0 <_printf_i+0xec>
 80078ac:	681e      	ldr	r6, [r3, #0]
 80078ae:	e002      	b.n	80078b6 <_printf_i+0xf2>
 80078b0:	0646      	lsls	r6, r0, #25
 80078b2:	d5fb      	bpl.n	80078ac <_printf_i+0xe8>
 80078b4:	881e      	ldrh	r6, [r3, #0]
 80078b6:	4854      	ldr	r0, [pc, #336]	; (8007a08 <_printf_i+0x244>)
 80078b8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ba:	bf0c      	ite	eq
 80078bc:	2308      	moveq	r3, #8
 80078be:	230a      	movne	r3, #10
 80078c0:	2100      	movs	r1, #0
 80078c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078c6:	6865      	ldr	r5, [r4, #4]
 80078c8:	60a5      	str	r5, [r4, #8]
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	bfa2      	ittt	ge
 80078ce:	6821      	ldrge	r1, [r4, #0]
 80078d0:	f021 0104 	bicge.w	r1, r1, #4
 80078d4:	6021      	strge	r1, [r4, #0]
 80078d6:	b90e      	cbnz	r6, 80078dc <_printf_i+0x118>
 80078d8:	2d00      	cmp	r5, #0
 80078da:	d04d      	beq.n	8007978 <_printf_i+0x1b4>
 80078dc:	4615      	mov	r5, r2
 80078de:	fbb6 f1f3 	udiv	r1, r6, r3
 80078e2:	fb03 6711 	mls	r7, r3, r1, r6
 80078e6:	5dc7      	ldrb	r7, [r0, r7]
 80078e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078ec:	4637      	mov	r7, r6
 80078ee:	42bb      	cmp	r3, r7
 80078f0:	460e      	mov	r6, r1
 80078f2:	d9f4      	bls.n	80078de <_printf_i+0x11a>
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10b      	bne.n	8007910 <_printf_i+0x14c>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	07de      	lsls	r6, r3, #31
 80078fc:	d508      	bpl.n	8007910 <_printf_i+0x14c>
 80078fe:	6923      	ldr	r3, [r4, #16]
 8007900:	6861      	ldr	r1, [r4, #4]
 8007902:	4299      	cmp	r1, r3
 8007904:	bfde      	ittt	le
 8007906:	2330      	movle	r3, #48	; 0x30
 8007908:	f805 3c01 	strble.w	r3, [r5, #-1]
 800790c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007910:	1b52      	subs	r2, r2, r5
 8007912:	6122      	str	r2, [r4, #16]
 8007914:	f8cd a000 	str.w	sl, [sp]
 8007918:	464b      	mov	r3, r9
 800791a:	aa03      	add	r2, sp, #12
 800791c:	4621      	mov	r1, r4
 800791e:	4640      	mov	r0, r8
 8007920:	f7ff fee2 	bl	80076e8 <_printf_common>
 8007924:	3001      	adds	r0, #1
 8007926:	d14c      	bne.n	80079c2 <_printf_i+0x1fe>
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	b004      	add	sp, #16
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	4835      	ldr	r0, [pc, #212]	; (8007a08 <_printf_i+0x244>)
 8007934:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007938:	6829      	ldr	r1, [r5, #0]
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007940:	6029      	str	r1, [r5, #0]
 8007942:	061d      	lsls	r5, r3, #24
 8007944:	d514      	bpl.n	8007970 <_printf_i+0x1ac>
 8007946:	07df      	lsls	r7, r3, #31
 8007948:	bf44      	itt	mi
 800794a:	f043 0320 	orrmi.w	r3, r3, #32
 800794e:	6023      	strmi	r3, [r4, #0]
 8007950:	b91e      	cbnz	r6, 800795a <_printf_i+0x196>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	f023 0320 	bic.w	r3, r3, #32
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	2310      	movs	r3, #16
 800795c:	e7b0      	b.n	80078c0 <_printf_i+0xfc>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	f043 0320 	orr.w	r3, r3, #32
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	2378      	movs	r3, #120	; 0x78
 8007968:	4828      	ldr	r0, [pc, #160]	; (8007a0c <_printf_i+0x248>)
 800796a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800796e:	e7e3      	b.n	8007938 <_printf_i+0x174>
 8007970:	0659      	lsls	r1, r3, #25
 8007972:	bf48      	it	mi
 8007974:	b2b6      	uxthmi	r6, r6
 8007976:	e7e6      	b.n	8007946 <_printf_i+0x182>
 8007978:	4615      	mov	r5, r2
 800797a:	e7bb      	b.n	80078f4 <_printf_i+0x130>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	6826      	ldr	r6, [r4, #0]
 8007980:	6961      	ldr	r1, [r4, #20]
 8007982:	1d18      	adds	r0, r3, #4
 8007984:	6028      	str	r0, [r5, #0]
 8007986:	0635      	lsls	r5, r6, #24
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	d501      	bpl.n	8007990 <_printf_i+0x1cc>
 800798c:	6019      	str	r1, [r3, #0]
 800798e:	e002      	b.n	8007996 <_printf_i+0x1d2>
 8007990:	0670      	lsls	r0, r6, #25
 8007992:	d5fb      	bpl.n	800798c <_printf_i+0x1c8>
 8007994:	8019      	strh	r1, [r3, #0]
 8007996:	2300      	movs	r3, #0
 8007998:	6123      	str	r3, [r4, #16]
 800799a:	4615      	mov	r5, r2
 800799c:	e7ba      	b.n	8007914 <_printf_i+0x150>
 800799e:	682b      	ldr	r3, [r5, #0]
 80079a0:	1d1a      	adds	r2, r3, #4
 80079a2:	602a      	str	r2, [r5, #0]
 80079a4:	681d      	ldr	r5, [r3, #0]
 80079a6:	6862      	ldr	r2, [r4, #4]
 80079a8:	2100      	movs	r1, #0
 80079aa:	4628      	mov	r0, r5
 80079ac:	f7f8 fc28 	bl	8000200 <memchr>
 80079b0:	b108      	cbz	r0, 80079b6 <_printf_i+0x1f2>
 80079b2:	1b40      	subs	r0, r0, r5
 80079b4:	6060      	str	r0, [r4, #4]
 80079b6:	6863      	ldr	r3, [r4, #4]
 80079b8:	6123      	str	r3, [r4, #16]
 80079ba:	2300      	movs	r3, #0
 80079bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c0:	e7a8      	b.n	8007914 <_printf_i+0x150>
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	462a      	mov	r2, r5
 80079c6:	4649      	mov	r1, r9
 80079c8:	4640      	mov	r0, r8
 80079ca:	47d0      	blx	sl
 80079cc:	3001      	adds	r0, #1
 80079ce:	d0ab      	beq.n	8007928 <_printf_i+0x164>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	079b      	lsls	r3, r3, #30
 80079d4:	d413      	bmi.n	80079fe <_printf_i+0x23a>
 80079d6:	68e0      	ldr	r0, [r4, #12]
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	4298      	cmp	r0, r3
 80079dc:	bfb8      	it	lt
 80079de:	4618      	movlt	r0, r3
 80079e0:	e7a4      	b.n	800792c <_printf_i+0x168>
 80079e2:	2301      	movs	r3, #1
 80079e4:	4632      	mov	r2, r6
 80079e6:	4649      	mov	r1, r9
 80079e8:	4640      	mov	r0, r8
 80079ea:	47d0      	blx	sl
 80079ec:	3001      	adds	r0, #1
 80079ee:	d09b      	beq.n	8007928 <_printf_i+0x164>
 80079f0:	3501      	adds	r5, #1
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	9903      	ldr	r1, [sp, #12]
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	42ab      	cmp	r3, r5
 80079fa:	dcf2      	bgt.n	80079e2 <_printf_i+0x21e>
 80079fc:	e7eb      	b.n	80079d6 <_printf_i+0x212>
 80079fe:	2500      	movs	r5, #0
 8007a00:	f104 0619 	add.w	r6, r4, #25
 8007a04:	e7f5      	b.n	80079f2 <_printf_i+0x22e>
 8007a06:	bf00      	nop
 8007a08:	08007d35 	.word	0x08007d35
 8007a0c:	08007d46 	.word	0x08007d46

08007a10 <memcpy>:
 8007a10:	440a      	add	r2, r1
 8007a12:	4291      	cmp	r1, r2
 8007a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a18:	d100      	bne.n	8007a1c <memcpy+0xc>
 8007a1a:	4770      	bx	lr
 8007a1c:	b510      	push	{r4, lr}
 8007a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a26:	4291      	cmp	r1, r2
 8007a28:	d1f9      	bne.n	8007a1e <memcpy+0xe>
 8007a2a:	bd10      	pop	{r4, pc}

08007a2c <memmove>:
 8007a2c:	4288      	cmp	r0, r1
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	eb01 0402 	add.w	r4, r1, r2
 8007a34:	d902      	bls.n	8007a3c <memmove+0x10>
 8007a36:	4284      	cmp	r4, r0
 8007a38:	4623      	mov	r3, r4
 8007a3a:	d807      	bhi.n	8007a4c <memmove+0x20>
 8007a3c:	1e43      	subs	r3, r0, #1
 8007a3e:	42a1      	cmp	r1, r4
 8007a40:	d008      	beq.n	8007a54 <memmove+0x28>
 8007a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a4a:	e7f8      	b.n	8007a3e <memmove+0x12>
 8007a4c:	4402      	add	r2, r0
 8007a4e:	4601      	mov	r1, r0
 8007a50:	428a      	cmp	r2, r1
 8007a52:	d100      	bne.n	8007a56 <memmove+0x2a>
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a5e:	e7f7      	b.n	8007a50 <memmove+0x24>

08007a60 <_free_r>:
 8007a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a62:	2900      	cmp	r1, #0
 8007a64:	d044      	beq.n	8007af0 <_free_r+0x90>
 8007a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6a:	9001      	str	r0, [sp, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a72:	bfb8      	it	lt
 8007a74:	18e4      	addlt	r4, r4, r3
 8007a76:	f000 f913 	bl	8007ca0 <__malloc_lock>
 8007a7a:	4a1e      	ldr	r2, [pc, #120]	; (8007af4 <_free_r+0x94>)
 8007a7c:	9801      	ldr	r0, [sp, #4]
 8007a7e:	6813      	ldr	r3, [r2, #0]
 8007a80:	b933      	cbnz	r3, 8007a90 <_free_r+0x30>
 8007a82:	6063      	str	r3, [r4, #4]
 8007a84:	6014      	str	r4, [r2, #0]
 8007a86:	b003      	add	sp, #12
 8007a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a8c:	f000 b90e 	b.w	8007cac <__malloc_unlock>
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d908      	bls.n	8007aa6 <_free_r+0x46>
 8007a94:	6825      	ldr	r5, [r4, #0]
 8007a96:	1961      	adds	r1, r4, r5
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	bf01      	itttt	eq
 8007a9c:	6819      	ldreq	r1, [r3, #0]
 8007a9e:	685b      	ldreq	r3, [r3, #4]
 8007aa0:	1949      	addeq	r1, r1, r5
 8007aa2:	6021      	streq	r1, [r4, #0]
 8007aa4:	e7ed      	b.n	8007a82 <_free_r+0x22>
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	b10b      	cbz	r3, 8007ab0 <_free_r+0x50>
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	d9fa      	bls.n	8007aa6 <_free_r+0x46>
 8007ab0:	6811      	ldr	r1, [r2, #0]
 8007ab2:	1855      	adds	r5, r2, r1
 8007ab4:	42a5      	cmp	r5, r4
 8007ab6:	d10b      	bne.n	8007ad0 <_free_r+0x70>
 8007ab8:	6824      	ldr	r4, [r4, #0]
 8007aba:	4421      	add	r1, r4
 8007abc:	1854      	adds	r4, r2, r1
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	6011      	str	r1, [r2, #0]
 8007ac2:	d1e0      	bne.n	8007a86 <_free_r+0x26>
 8007ac4:	681c      	ldr	r4, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	6053      	str	r3, [r2, #4]
 8007aca:	4421      	add	r1, r4
 8007acc:	6011      	str	r1, [r2, #0]
 8007ace:	e7da      	b.n	8007a86 <_free_r+0x26>
 8007ad0:	d902      	bls.n	8007ad8 <_free_r+0x78>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	6003      	str	r3, [r0, #0]
 8007ad6:	e7d6      	b.n	8007a86 <_free_r+0x26>
 8007ad8:	6825      	ldr	r5, [r4, #0]
 8007ada:	1961      	adds	r1, r4, r5
 8007adc:	428b      	cmp	r3, r1
 8007ade:	bf04      	itt	eq
 8007ae0:	6819      	ldreq	r1, [r3, #0]
 8007ae2:	685b      	ldreq	r3, [r3, #4]
 8007ae4:	6063      	str	r3, [r4, #4]
 8007ae6:	bf04      	itt	eq
 8007ae8:	1949      	addeq	r1, r1, r5
 8007aea:	6021      	streq	r1, [r4, #0]
 8007aec:	6054      	str	r4, [r2, #4]
 8007aee:	e7ca      	b.n	8007a86 <_free_r+0x26>
 8007af0:	b003      	add	sp, #12
 8007af2:	bd30      	pop	{r4, r5, pc}
 8007af4:	20000750 	.word	0x20000750

08007af8 <sbrk_aligned>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	4e0e      	ldr	r6, [pc, #56]	; (8007b34 <sbrk_aligned+0x3c>)
 8007afc:	460c      	mov	r4, r1
 8007afe:	6831      	ldr	r1, [r6, #0]
 8007b00:	4605      	mov	r5, r0
 8007b02:	b911      	cbnz	r1, 8007b0a <sbrk_aligned+0x12>
 8007b04:	f000 f8bc 	bl	8007c80 <_sbrk_r>
 8007b08:	6030      	str	r0, [r6, #0]
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f000 f8b7 	bl	8007c80 <_sbrk_r>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	d00a      	beq.n	8007b2c <sbrk_aligned+0x34>
 8007b16:	1cc4      	adds	r4, r0, #3
 8007b18:	f024 0403 	bic.w	r4, r4, #3
 8007b1c:	42a0      	cmp	r0, r4
 8007b1e:	d007      	beq.n	8007b30 <sbrk_aligned+0x38>
 8007b20:	1a21      	subs	r1, r4, r0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f000 f8ac 	bl	8007c80 <_sbrk_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d101      	bne.n	8007b30 <sbrk_aligned+0x38>
 8007b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b30:	4620      	mov	r0, r4
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	20000754 	.word	0x20000754

08007b38 <_malloc_r>:
 8007b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3c:	1ccd      	adds	r5, r1, #3
 8007b3e:	f025 0503 	bic.w	r5, r5, #3
 8007b42:	3508      	adds	r5, #8
 8007b44:	2d0c      	cmp	r5, #12
 8007b46:	bf38      	it	cc
 8007b48:	250c      	movcc	r5, #12
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	db01      	blt.n	8007b54 <_malloc_r+0x1c>
 8007b50:	42a9      	cmp	r1, r5
 8007b52:	d905      	bls.n	8007b60 <_malloc_r+0x28>
 8007b54:	230c      	movs	r3, #12
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	2600      	movs	r6, #0
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	4e2e      	ldr	r6, [pc, #184]	; (8007c1c <_malloc_r+0xe4>)
 8007b62:	f000 f89d 	bl	8007ca0 <__malloc_lock>
 8007b66:	6833      	ldr	r3, [r6, #0]
 8007b68:	461c      	mov	r4, r3
 8007b6a:	bb34      	cbnz	r4, 8007bba <_malloc_r+0x82>
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4638      	mov	r0, r7
 8007b70:	f7ff ffc2 	bl	8007af8 <sbrk_aligned>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	4604      	mov	r4, r0
 8007b78:	d14d      	bne.n	8007c16 <_malloc_r+0xde>
 8007b7a:	6834      	ldr	r4, [r6, #0]
 8007b7c:	4626      	mov	r6, r4
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	d140      	bne.n	8007c04 <_malloc_r+0xcc>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	4631      	mov	r1, r6
 8007b86:	4638      	mov	r0, r7
 8007b88:	eb04 0803 	add.w	r8, r4, r3
 8007b8c:	f000 f878 	bl	8007c80 <_sbrk_r>
 8007b90:	4580      	cmp	r8, r0
 8007b92:	d13a      	bne.n	8007c0a <_malloc_r+0xd2>
 8007b94:	6821      	ldr	r1, [r4, #0]
 8007b96:	3503      	adds	r5, #3
 8007b98:	1a6d      	subs	r5, r5, r1
 8007b9a:	f025 0503 	bic.w	r5, r5, #3
 8007b9e:	3508      	adds	r5, #8
 8007ba0:	2d0c      	cmp	r5, #12
 8007ba2:	bf38      	it	cc
 8007ba4:	250c      	movcc	r5, #12
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ffa5 	bl	8007af8 <sbrk_aligned>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d02b      	beq.n	8007c0a <_malloc_r+0xd2>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	442b      	add	r3, r5
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	e00e      	b.n	8007bd8 <_malloc_r+0xa0>
 8007bba:	6822      	ldr	r2, [r4, #0]
 8007bbc:	1b52      	subs	r2, r2, r5
 8007bbe:	d41e      	bmi.n	8007bfe <_malloc_r+0xc6>
 8007bc0:	2a0b      	cmp	r2, #11
 8007bc2:	d916      	bls.n	8007bf2 <_malloc_r+0xba>
 8007bc4:	1961      	adds	r1, r4, r5
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	6025      	str	r5, [r4, #0]
 8007bca:	bf18      	it	ne
 8007bcc:	6059      	strne	r1, [r3, #4]
 8007bce:	6863      	ldr	r3, [r4, #4]
 8007bd0:	bf08      	it	eq
 8007bd2:	6031      	streq	r1, [r6, #0]
 8007bd4:	5162      	str	r2, [r4, r5]
 8007bd6:	604b      	str	r3, [r1, #4]
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f104 060b 	add.w	r6, r4, #11
 8007bde:	f000 f865 	bl	8007cac <__malloc_unlock>
 8007be2:	f026 0607 	bic.w	r6, r6, #7
 8007be6:	1d23      	adds	r3, r4, #4
 8007be8:	1af2      	subs	r2, r6, r3
 8007bea:	d0b6      	beq.n	8007b5a <_malloc_r+0x22>
 8007bec:	1b9b      	subs	r3, r3, r6
 8007bee:	50a3      	str	r3, [r4, r2]
 8007bf0:	e7b3      	b.n	8007b5a <_malloc_r+0x22>
 8007bf2:	6862      	ldr	r2, [r4, #4]
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	bf0c      	ite	eq
 8007bf8:	6032      	streq	r2, [r6, #0]
 8007bfa:	605a      	strne	r2, [r3, #4]
 8007bfc:	e7ec      	b.n	8007bd8 <_malloc_r+0xa0>
 8007bfe:	4623      	mov	r3, r4
 8007c00:	6864      	ldr	r4, [r4, #4]
 8007c02:	e7b2      	b.n	8007b6a <_malloc_r+0x32>
 8007c04:	4634      	mov	r4, r6
 8007c06:	6876      	ldr	r6, [r6, #4]
 8007c08:	e7b9      	b.n	8007b7e <_malloc_r+0x46>
 8007c0a:	230c      	movs	r3, #12
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f000 f84c 	bl	8007cac <__malloc_unlock>
 8007c14:	e7a1      	b.n	8007b5a <_malloc_r+0x22>
 8007c16:	6025      	str	r5, [r4, #0]
 8007c18:	e7de      	b.n	8007bd8 <_malloc_r+0xa0>
 8007c1a:	bf00      	nop
 8007c1c:	20000750 	.word	0x20000750

08007c20 <_realloc_r>:
 8007c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c24:	4680      	mov	r8, r0
 8007c26:	4614      	mov	r4, r2
 8007c28:	460e      	mov	r6, r1
 8007c2a:	b921      	cbnz	r1, 8007c36 <_realloc_r+0x16>
 8007c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4611      	mov	r1, r2
 8007c32:	f7ff bf81 	b.w	8007b38 <_malloc_r>
 8007c36:	b92a      	cbnz	r2, 8007c44 <_realloc_r+0x24>
 8007c38:	f7ff ff12 	bl	8007a60 <_free_r>
 8007c3c:	4625      	mov	r5, r4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c44:	f000 f838 	bl	8007cb8 <_malloc_usable_size_r>
 8007c48:	4284      	cmp	r4, r0
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	d802      	bhi.n	8007c54 <_realloc_r+0x34>
 8007c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c52:	d812      	bhi.n	8007c7a <_realloc_r+0x5a>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7ff ff6e 	bl	8007b38 <_malloc_r>
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d0ed      	beq.n	8007c3e <_realloc_r+0x1e>
 8007c62:	42bc      	cmp	r4, r7
 8007c64:	4622      	mov	r2, r4
 8007c66:	4631      	mov	r1, r6
 8007c68:	bf28      	it	cs
 8007c6a:	463a      	movcs	r2, r7
 8007c6c:	f7ff fed0 	bl	8007a10 <memcpy>
 8007c70:	4631      	mov	r1, r6
 8007c72:	4640      	mov	r0, r8
 8007c74:	f7ff fef4 	bl	8007a60 <_free_r>
 8007c78:	e7e1      	b.n	8007c3e <_realloc_r+0x1e>
 8007c7a:	4635      	mov	r5, r6
 8007c7c:	e7df      	b.n	8007c3e <_realloc_r+0x1e>
	...

08007c80 <_sbrk_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	; (8007c9c <_sbrk_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7f9 fc5a 	bl	8001544 <_sbrk>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_sbrk_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_sbrk_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000758 	.word	0x20000758

08007ca0 <__malloc_lock>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	; (8007ca8 <__malloc_lock+0x8>)
 8007ca2:	f000 b811 	b.w	8007cc8 <__retarget_lock_acquire_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	2000075c 	.word	0x2000075c

08007cac <__malloc_unlock>:
 8007cac:	4801      	ldr	r0, [pc, #4]	; (8007cb4 <__malloc_unlock+0x8>)
 8007cae:	f000 b80c 	b.w	8007cca <__retarget_lock_release_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	2000075c 	.word	0x2000075c

08007cb8 <_malloc_usable_size_r>:
 8007cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cbc:	1f18      	subs	r0, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfbc      	itt	lt
 8007cc2:	580b      	ldrlt	r3, [r1, r0]
 8007cc4:	18c0      	addlt	r0, r0, r3
 8007cc6:	4770      	bx	lr

08007cc8 <__retarget_lock_acquire_recursive>:
 8007cc8:	4770      	bx	lr

08007cca <__retarget_lock_release_recursive>:
 8007cca:	4770      	bx	lr

08007ccc <_init>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr

08007cd8 <_fini>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr
